
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador_Sintactico;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import analizador_Semantico.Semantico;
import analizador_Semantico.Simbolo;
import analizador_Semantico.Identificador;
import analizador_Semantico.Registro_Semantico;
import analizador_Semantico.RS_DO;
import analizador_Semantico.RS_Operador;
import analizador_Semantico.RS_tipo;
import java.util.Stack;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\374\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\104\004" +
    "\000\002\104\004\000\002\104\004\000\002\104\004\000" +
    "\002\106\004\000\002\106\006\000\002\106\005\000\002" +
    "\106\010\000\002\106\007\000\002\106\004\000\002\106" +
    "\004\000\002\106\005\000\002\111\004\000\002\111\003" +
    "\000\002\105\005\000\002\105\004\000\002\105\004\000" +
    "\002\105\003\000\002\110\006\000\002\110\005\000\002" +
    "\110\006\000\002\110\004\000\002\004\004\000\002\004" +
    "\003\000\002\004\006\000\002\004\005\000\002\004\004" +
    "\000\002\006\003\000\002\006\003\000\002\007\004\000" +
    "\002\007\003\000\002\010\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\012\004\000\002\012\004\000\002\013\005\000" +
    "\002\013\006\000\002\013\006\000\002\013\007\000\002" +
    "\013\005\000\002\013\004\000\002\014\006\000\002\014" +
    "\004\000\002\014\006\000\002\015\004\000\002\015\003" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\004\000\002\016\004\000\002\016\005\000\002" +
    "\016\005\000\002\103\004\000\002\103\003\000\002\017" +
    "\003\000\002\017\004\000\002\020\005\000\002\020\003" +
    "\000\002\020\004\000\002\021\004\000\002\022\004\000" +
    "\002\022\003\000\002\023\004\000\002\023\004\000\002" +
    "\023\003\000\002\023\004\000\002\023\004\000\002\023" +
    "\004\000\002\024\003\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\004\000\002\026\003\000\002\027\006\000\002" +
    "\027\010\000\002\027\007\000\002\027\006\000\002\027" +
    "\005\000\002\030\004\000\002\031\003\000\002\031\005" +
    "\000\002\032\005\000\002\032\007\000\002\032\006\000" +
    "\002\032\005\000\002\033\011\000\002\033\007\000\002" +
    "\033\010\000\002\033\010\000\002\033\010\000\002\033" +
    "\007\000\002\033\007\000\002\033\006\000\002\033\005" +
    "\000\002\123\003\000\002\123\006\000\002\034\004\000" +
    "\002\034\005\000\002\034\003\000\002\034\004\000\002" +
    "\035\006\000\002\035\010\000\002\035\007\000\002\035" +
    "\006\000\002\035\005\000\002\036\011\000\002\036\010" +
    "\000\002\036\011\000\002\037\010\000\002\037\011\000" +
    "\002\037\011\000\002\037\012\000\002\037\010\000\002" +
    "\037\007\000\002\037\005\000\002\037\006\000\002\037" +
    "\010\000\002\037\011\000\002\037\012\000\002\037\012" +
    "\000\002\037\013\000\002\037\012\000\002\037\013\000" +
    "\002\116\006\000\002\116\004\000\002\116\004\000\002" +
    "\120\003\000\002\120\003\000\002\117\006\000\002\117" +
    "\005\000\002\117\003\000\002\121\005\000\002\121\004" +
    "\000\002\121\004\000\002\121\004\000\002\121\003\000" +
    "\002\122\005\000\002\122\003\000\002\122\003\000\002" +
    "\043\004\000\002\043\003\000\002\043\003\000\002\040" +
    "\004\000\002\040\003\000\002\115\004\000\002\115\004" +
    "\000\002\115\003\000\002\115\004\000\002\115\004\000" +
    "\002\115\004\000\002\044\004\000\002\044\003\000\002" +
    "\045\004\000\002\045\003\000\002\046\006\000\002\046" +
    "\006\000\002\046\006\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\051\003\000\002\051\003\000" +
    "\002\053\003\000\002\054\003\000\002\055\006\000\002" +
    "\055\004\000\002\055\004\000\002\056\003\000\002\056" +
    "\003\000\002\057\005\000\002\057\006\000\002\060\006" +
    "\000\002\060\007\000\002\061\005\000\002\061\004\000" +
    "\002\062\003\000\002\062\003\000\002\063\004\000\002" +
    "\064\004\000\002\064\003\000\002\065\003\000\002\065" +
    "\005\000\002\066\004\000\002\067\006\000\002\067\005" +
    "\000\002\067\003\000\002\070\005\000\002\070\004\000" +
    "\002\070\004\000\002\070\004\000\002\070\003\000\002" +
    "\113\004\000\002\113\003\000\002\071\005\000\002\071" +
    "\003\000\002\072\005\000\002\072\003\000\002\073\003" +
    "\000\002\073\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\100\004\000\002\100" +
    "\004\000\002\100\003\000\002\112\004\000\002\112\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\004\000\002\101\004\000\002\101\003\000\002" +
    "\107\003\000\002\107\004\000\002\107\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b9\000\024\003\023\010\015\042\012\043\010\052" +
    "\004\053\006\055\011\057\026\062\027\001\002\000\012" +
    "\003\uff11\010\uff11\043\uff11\062\uff11\001\002\000\004\002" +
    "\uffff\001\002\000\016\003\uff0f\010\uff0f\043\uff0f\052\uff0b" +
    "\053\u01bb\062\uff0f\001\002\000\010\003\uffe1\010\uffe1\062" +
    "\uffe1\001\002\000\022\003\uff12\010\uff12\042\uff12\043\010" +
    "\052\uff12\053\uff12\055\uff12\062\uff12\001\002\000\014\003" +
    "\uff0c\010\uff0c\043\uff0c\052\uff09\062\uff0c\001\002\000\012" +
    "\003\uff10\010\uff10\043\uff10\062\uff10\001\002\000\010\003" +
    "\u01a1\010\u01b9\062\027\001\002\000\026\002\uffeb\003\u01b3" +
    "\010\u01b2\042\012\043\010\052\004\053\006\055\011\057" +
    "\026\062\027\001\002\000\012\013\u0180\021\u01ae\061\u019b" +
    "\062\uffe5\001\002\000\004\002\000\001\002\000\012\003" +
    "\uffe0\010\uffe0\043\010\062\uffe0\001\002\000\020\003\u0199" +
    "\010\u0198\042\012\043\010\052\004\053\006\055\011\001" +
    "\002\000\022\003\023\010\015\042\012\043\010\052\004" +
    "\053\006\055\011\057\026\001\002\000\004\052\u0194\001" +
    "\002\000\030\003\u0183\010\015\013\u0180\042\012\043\010" +
    "\052\004\053\006\055\011\057\026\062\027\065\046\001" +
    "\002\000\004\002\ufffd\001\002\000\020\003\uff14\010\uff14" +
    "\042\012\052\004\053\006\055\011\062\uff14\001\002\000" +
    "\004\010\035\001\002\000\064\002\uffef\003\uffef\006\uffef" +
    "\007\uffef\010\uffef\014\uffef\015\uffef\021\uffef\037\uffef\042" +
    "\uffef\043\uffef\046\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\062\027\066" +
    "\uffef\067\uffef\070\uffef\001\002\000\004\002\033\001\002" +
    "\000\004\062\027\001\002\000\022\003\ufff8\010\ufff8\042" +
    "\ufff8\043\ufff8\052\ufff8\053\ufff8\055\ufff8\057\ufff8\001\002" +
    "\000\004\002\001\001\002\000\062\002\ufff0\003\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\014\ufff0\015\ufff0\021\ufff0\037\ufff0" +
    "\042\ufff0\043\ufff0\046\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\001\002\000\004\021\036\001\002\000" +
    "\016\003\040\022\043\042\012\052\004\053\006\055\011" +
    "\001\002\000\026\002\uffe8\003\uffe8\010\uffe8\042\uffe8\043" +
    "\uffe8\052\uffe8\053\uffe8\055\uffe8\057\uffe8\062\uffe8\001\002" +
    "\000\006\003\045\065\046\001\002\000\004\010\u0176\001" +
    "\002\000\004\022\u0174\001\002\000\006\003\045\065\046" +
    "\001\002\000\026\002\uffd4\003\uffd4\010\uffd4\042\uffd4\043" +
    "\uffd4\052\uffd4\053\uffd4\055\uffd4\057\uffd4\062\uffd4\001\002" +
    "\000\004\066\u0173\001\002\000\056\003\101\006\114\007" +
    "\053\010\107\014\077\015\074\021\100\037\110\042\012" +
    "\043\010\046\117\050\102\051\073\052\004\053\006\054" +
    "\054\055\011\056\065\060\076\062\027\067\056\070\116" +
    "\001\002\000\054\003\134\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\042\012\043\010\046\117" +
    "\050\102\051\073\052\004\053\006\054\054\055\011\056" +
    "\065\060\076\067\056\070\116\001\002\000\060\003\uffac" +
    "\006\uffac\007\uffac\010\uffac\014\uffac\015\uffac\021\uffac\037" +
    "\uffac\040\uffac\041\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\054\uffac\056\uffac\060\uffac\062\uffac\066" +
    "\uffac\067\uffac\070\uffac\001\002\000\012\003\u016a\010\350" +
    "\043\010\062\351\001\002\000\020\006\114\007\053\010" +
    "\212\014\077\015\074\021\100\037\110\001\002\000\056" +
    "\006\uff07\007\uff07\010\uff07\013\uff07\014\uff07\015\uff07\016" +
    "\uff07\017\uff07\020\uff07\021\uff07\022\uff07\027\uff07\030\uff07" +
    "\031\uff07\032\uff07\033\uff07\034\uff07\035\uff07\036\uff07\037" +
    "\uff07\061\uff07\062\uff07\001\002\000\024\006\114\007\053" +
    "\010\107\014\077\015\074\021\100\037\110\061\u0163\062" +
    "\uff3e\001\002\000\006\062\uffc8\066\uffc8\001\002\000\004" +
    "\021\u015f\001\002\000\004\062\u015e\001\002\000\060\003" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\014\uffa9\015\uffa9\021\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\u0157\050\uffa9\051\uffa9\054\uffa9\056\uffa9\060\uffa9\062\uffa9" +
    "\066\uffa9\067\uffa9\070\uffa9\001\002\000\004\062\uff49\001" +
    "\002\000\060\003\uffad\006\uffad\007\uffad\010\uffad\014\uffad" +
    "\015\uffad\021\uffad\037\uffad\040\uffad\041\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\054\uffad\056\uffad" +
    "\060\uffad\062\uffad\066\uffad\067\uffad\070\uffad\001\002\000" +
    "\006\062\027\066\u0154\001\002\000\004\062\u0153\001\002" +
    "\000\006\003\366\021\365\001\002\000\056\006\uff38\007" +
    "\uff38\010\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38" +
    "\020\uff38\021\uff38\022\uff38\027\uff38\030\uff38\031\uff38\032" +
    "\uff38\033\uff38\034\uff38\035\uff38\036\uff38\037\uff38\061\uff38" +
    "\062\uff38\001\002\000\010\003\346\010\350\062\351\001" +
    "\002\000\046\003\134\006\114\007\053\010\107\014\077" +
    "\015\074\021\100\037\110\046\117\050\102\051\073\054" +
    "\054\056\065\060\076\062\uffb7\066\uffb7\067\056\070\116" +
    "\001\002\000\060\003\uffae\006\uffae\007\uffae\010\uffae\014" +
    "\uffae\015\uffae\021\uffae\037\uffae\040\uffae\041\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\054\uffae\056" +
    "\uffae\060\uffae\062\uffae\066\uffae\067\uffae\070\uffae\001\002" +
    "\000\054\006\uffaf\007\uffaf\010\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\061\uffaf\062\uffaf\001\002\000\006\003\333\021\332" +
    "\001\002\000\020\006\114\007\053\010\212\014\077\015" +
    "\074\021\100\037\110\001\002\000\004\062\330\001\002" +
    "\000\006\003\316\021\315\001\002\000\020\006\114\007" +
    "\053\010\212\014\077\015\074\021\100\037\110\001\002" +
    "\000\020\006\114\007\053\010\212\014\077\015\074\021" +
    "\100\037\110\001\002\000\006\062\135\066\311\001\002" +
    "\000\006\003\245\021\244\001\002\000\060\003\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\014\uffb4\015\uffb4\021\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\054\uffb4\056\uffb4\060\uffb4\062\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\001\002\000\056\006\uff33\007\uff33\010" +
    "\uff33\013\uff33\014\164\015\151\016\161\017\144\020\155" +
    "\021\uff33\022\uff33\027\153\030\163\031\154\032\146\033" +
    "\156\034\160\035\147\036\152\037\uff33\061\uff33\062\uff33" +
    "\001\002\000\054\006\uffb0\007\uffb0\010\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\061\uffb0\062\uffb0\001\002\000\004\062\uff4a" +
    "\001\002\000\072\006\uff06\007\uff06\010\uff06\011\205\012" +
    "\206\013\233\014\uff06\015\uff06\016\uff06\017\uff06\020\uff06" +
    "\021\204\022\uff06\023\231\024\224\025\223\026\230\027" +
    "\uff06\030\uff06\031\uff06\032\uff06\033\uff06\034\uff06\035\uff06" +
    "\036\uff06\037\uff06\061\uff06\062\uff06\001\002\000\020\006" +
    "\uff31\007\uff31\010\uff31\014\uff31\015\uff31\021\uff31\037\uff31" +
    "\001\002\000\046\003\134\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\046\117\050\102\051\073" +
    "\054\054\056\065\060\076\062\uffc7\066\uffc7\067\056\070" +
    "\116\001\002\000\060\003\uffab\006\uffab\007\uffab\010\uffab" +
    "\014\uffab\015\uffab\021\uffab\037\uffab\040\uffab\041\uffab\044" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\054\uffab" +
    "\056\uffab\060\uffab\062\uffab\066\uffab\067\uffab\070\uffab\001" +
    "\002\000\056\006\uff2f\007\uff2f\010\uff2f\013\uff2f\014\uff2f" +
    "\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\022\uff2f\027" +
    "\uff2f\030\uff2f\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f" +
    "\036\uff2f\037\uff2f\061\uff2f\062\uff2f\001\002\000\056\006" +
    "\uff08\007\uff08\010\uff08\013\uff08\014\uff08\015\uff08\016\uff08" +
    "\017\uff08\020\uff08\021\uff08\022\uff08\027\uff08\030\uff08\031" +
    "\uff08\032\uff08\033\uff08\034\uff08\035\uff08\036\uff08\037\uff08" +
    "\061\uff08\062\uff08\001\002\000\004\062\220\001\002\000" +
    "\004\021\200\001\002\000\004\065\120\001\002\000\050" +
    "\003\126\006\114\007\053\010\107\014\077\015\074\021" +
    "\100\037\110\040\123\044\130\046\117\050\102\051\073" +
    "\054\054\056\065\060\076\066\121\067\056\070\116\001" +
    "\002\000\004\060\175\001\002\000\004\066\171\001\002" +
    "\000\004\062\uff4f\001\002\000\050\003\134\006\114\007" +
    "\053\010\107\014\077\015\074\021\100\037\110\040\123" +
    "\044\130\046\117\050\102\051\073\054\054\056\065\060" +
    "\076\066\uff8f\067\056\070\116\001\002\000\004\062\uff51" +
    "\001\002\000\006\062\135\066\136\001\002\000\004\062" +
    "\uff50\001\002\000\004\062\uff4e\001\002\000\004\062\132" +
    "\001\002\000\050\003\134\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\040\123\044\130\046\117" +
    "\050\102\051\073\054\054\056\065\060\076\066\uff8e\067" +
    "\056\070\116\001\002\000\004\066\uff90\001\002\000\004" +
    "\062\135\001\002\000\060\003\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\014\uffb1\015\uffb1\021\uffb1\037\uffb1\040\uffb1\041\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\054" +
    "\uffb1\056\uffb1\060\uffb1\062\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\001\002\000\004\060\137\001\002\000\004\021\140\001" +
    "\002\000\022\003\142\006\114\007\053\010\107\014\077" +
    "\015\074\021\100\037\110\001\002\000\004\062\uff86\001" +
    "\002\000\004\022\167\001\002\000\036\014\164\015\151" +
    "\016\161\017\144\020\155\022\162\027\153\030\163\031" +
    "\154\032\146\033\156\034\160\035\147\036\152\001\002" +
    "\000\022\003\uff27\006\uff27\007\uff27\010\uff27\014\uff27\015" +
    "\uff27\021\uff27\037\uff27\001\002\000\022\003\142\006\114" +
    "\007\053\010\107\014\077\015\074\021\100\037\110\001" +
    "\002\000\022\003\uff1b\006\uff1b\007\uff1b\010\uff1b\014\uff1b" +
    "\015\uff1b\021\uff1b\037\uff1b\001\002\000\022\003\uff18\006" +
    "\uff18\007\uff18\010\uff18\014\uff18\015\uff18\021\uff18\037\uff18" +
    "\001\002\000\022\003\uff2c\006\uff2c\007\uff2c\010\uff2c\014" +
    "\uff2c\015\uff2c\021\uff2c\037\uff2c\001\002\000\022\003\uff29" +
    "\006\uff29\007\uff29\010\uff29\014\uff29\015\uff29\021\uff29\037" +
    "\uff29\001\002\000\022\003\uff17\006\uff17\007\uff17\010\uff17" +
    "\014\uff17\015\uff17\021\uff17\037\uff17\001\002\000\022\003" +
    "\uff1e\006\uff1e\007\uff1e\010\uff1e\014\uff1e\015\uff1e\021\uff1e" +
    "\037\uff1e\001\002\000\022\003\uff1c\006\uff1c\007\uff1c\010" +
    "\uff1c\014\uff1c\015\uff1c\021\uff1c\037\uff1c\001\002\000\022" +
    "\003\uff26\006\uff26\007\uff26\010\uff26\014\uff26\015\uff26\021" +
    "\uff26\037\uff26\001\002\000\022\003\uff1a\006\uff1a\007\uff1a" +
    "\010\uff1a\014\uff1a\015\uff1a\021\uff1a\037\uff1a\001\002\000" +
    "\022\003\uff2b\006\uff2b\007\uff2b\010\uff2b\014\uff2b\015\uff2b" +
    "\021\uff2b\037\uff2b\001\002\000\022\003\uff19\006\uff19\007" +
    "\uff19\010\uff19\014\uff19\015\uff19\021\uff19\037\uff19\001\002" +
    "\000\022\003\uff28\006\uff28\007\uff28\010\uff28\014\uff28\015" +
    "\uff28\021\uff28\037\uff28\001\002\000\050\003\uff4c\006\uff4c" +
    "\007\uff4c\010\uff4c\014\uff4c\015\uff4c\021\uff4c\022\uff4c\037" +
    "\uff4c\046\uff4c\050\uff4c\051\uff4c\054\uff4c\056\uff4c\060\uff4c" +
    "\062\uff4c\065\uff4c\067\uff4c\070\uff4c\001\002\000\022\003" +
    "\uff1d\006\uff1d\007\uff1d\010\uff1d\014\uff1d\015\uff1d\021\uff1d" +
    "\037\uff1d\001\002\000\022\003\uff2a\006\uff2a\007\uff2a\010" +
    "\uff2a\014\uff2a\015\uff2a\021\uff2a\037\uff2a\001\002\000\004" +
    "\022\166\001\002\000\050\003\uff4d\006\uff4d\007\uff4d\010" +
    "\uff4d\014\uff4d\015\uff4d\021\uff4d\022\uff4d\037\uff4d\046\uff4d" +
    "\050\uff4d\051\uff4d\054\uff4d\056\uff4d\060\uff4d\062\uff4d\065" +
    "\uff4d\067\uff4d\070\uff4d\001\002\000\050\003\uff4b\006\uff4b" +
    "\007\uff4b\010\uff4b\014\uff4b\015\uff4b\021\uff4b\022\uff4b\037" +
    "\uff4b\046\uff4b\050\uff4b\051\uff4b\054\uff4b\056\uff4b\060\uff4b" +
    "\062\uff4b\065\uff4b\067\uff4b\070\uff4b\001\002\000\004\066" +
    "\uff91\001\002\000\004\060\172\001\002\000\004\021\173" +
    "\001\002\000\022\003\142\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\001\002\000\004\062\uff88" +
    "\001\002\000\004\021\176\001\002\000\022\003\142\006" +
    "\114\007\053\010\107\014\077\015\074\021\100\037\110" +
    "\001\002\000\004\062\uff87\001\002\000\020\006\114\007" +
    "\053\010\201\014\077\015\074\021\100\037\110\001\002" +
    "\000\044\011\205\012\206\014\uff06\015\uff06\016\uff06\017" +
    "\uff06\020\uff06\021\204\022\uff06\027\uff06\030\uff06\031\uff06" +
    "\032\uff06\033\uff06\034\uff06\035\uff06\036\uff06\001\002\000" +
    "\004\022\203\001\002\000\004\062\uff46\001\002\000\022" +
    "\006\114\007\053\010\212\014\077\015\074\021\100\022" +
    "\213\037\110\001\002\000\054\006\uff20\007\uff20\010\uff20" +
    "\014\uff20\015\uff20\016\uff20\017\uff20\020\uff20\021\uff20\022" +
    "\uff20\027\uff20\030\uff20\031\uff20\032\uff20\033\uff20\034\uff20" +
    "\035\uff20\036\uff20\037\uff20\061\uff20\062\uff20\001\002\000" +
    "\054\006\uff1f\007\uff1f\010\uff1f\014\uff1f\015\uff1f\016\uff1f" +
    "\017\uff1f\020\uff1f\021\uff1f\022\uff1f\027\uff1f\030\uff1f\031" +
    "\uff1f\032\uff1f\033\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f" +
    "\061\uff1f\062\uff1f\001\002\000\004\022\210\001\002\000" +
    "\004\062\uff45\001\002\000\004\022\217\001\002\000\056" +
    "\006\uff06\007\uff06\010\uff06\013\uff06\014\uff06\015\uff06\016" +
    "\uff06\017\uff06\020\uff06\021\204\022\uff06\027\uff06\030\uff06" +
    "\031\uff06\032\uff06\033\uff06\034\uff06\035\uff06\036\uff06\037" +
    "\uff06\061\uff06\062\uff06\001\002\000\056\006\uff39\007\uff39" +
    "\010\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020" +
    "\uff39\021\uff39\022\uff39\027\uff39\030\uff39\031\uff39\032\uff39" +
    "\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\061\uff39\062" +
    "\uff39\001\002\000\006\022\uff2d\061\215\001\002\000\020" +
    "\006\114\007\053\010\212\014\077\015\074\021\100\037" +
    "\110\001\002\000\004\022\uff2e\001\002\000\056\006\uff3a" +
    "\007\uff3a\010\uff3a\013\uff3a\014\uff3a\015\uff3a\016\uff3a\017" +
    "\uff3a\020\uff3a\021\uff3a\022\uff3a\027\uff3a\030\uff3a\031\uff3a" +
    "\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a\061" +
    "\uff3a\062\uff3a\001\002\000\060\003\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\014\uffb6\015\uffb6\021\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\054\uffb6\056\uffb6\060\uffb6\062\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\001\002\000\006\062\uffc9\066\uffc9\001\002\000\020" +
    "\006\uff32\007\uff32\010\uff32\014\uff32\015\uff32\021\uff32\037" +
    "\uff32\001\002\000\020\006\uff22\007\uff22\010\uff22\014\uff22" +
    "\015\uff22\021\uff22\037\uff22\001\002\000\020\006\uff23\007" +
    "\uff23\010\uff23\014\uff23\015\uff23\021\uff23\037\uff23\001\002" +
    "\000\020\006\114\007\053\010\212\014\077\015\074\021" +
    "\100\037\110\001\002\000\054\006\uff42\007\uff42\010\uff42" +
    "\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022" +
    "\uff42\027\uff42\030\uff42\031\uff42\032\uff42\033\uff42\034\uff42" +
    "\035\uff42\036\uff42\037\uff42\061\uff42\062\uff42\001\002\000" +
    "\054\006\uff43\007\uff43\010\uff43\014\uff43\015\uff43\016\uff43" +
    "\017\uff43\020\uff43\021\uff43\022\uff43\027\uff43\030\uff43\031" +
    "\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43" +
    "\061\uff43\062\uff43\001\002\000\020\006\uff21\007\uff21\010" +
    "\uff21\014\uff21\015\uff21\021\uff21\037\uff21\001\002\000\020" +
    "\006\uff24\007\uff24\010\uff24\014\uff24\015\uff24\021\uff24\037" +
    "\uff24\001\002\000\054\006\uff41\007\uff41\010\uff41\014\uff41" +
    "\015\uff41\016\uff41\017\uff41\020\uff41\021\uff41\022\uff41\027" +
    "\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035\uff41" +
    "\036\uff41\037\uff41\061\uff41\062\uff41\001\002\000\020\006" +
    "\uff25\007\uff25\010\uff25\014\uff25\015\uff25\021\uff25\037\uff25" +
    "\001\002\000\004\010\237\001\002\000\054\006\uff44\007" +
    "\uff44\010\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020\uff44" +
    "\021\uff44\022\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033" +
    "\uff44\034\uff44\035\uff44\036\uff44\037\uff44\061\uff44\062\uff44" +
    "\001\002\000\054\006\uff40\007\uff40\010\uff40\014\uff40\015" +
    "\uff40\016\uff40\017\uff40\020\uff40\021\uff40\022\uff40\027\uff40" +
    "\030\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\036" +
    "\uff40\037\uff40\061\uff40\062\uff40\001\002\000\020\011\205" +
    "\012\206\013\233\023\231\024\224\025\223\026\230\001" +
    "\002\000\054\006\uff3b\007\uff3b\010\uff3b\014\uff3b\015\uff3b" +
    "\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\027\uff3b\030" +
    "\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b" +
    "\037\uff3b\061\uff3b\062\uff3b\001\002\000\020\006\114\007" +
    "\053\010\243\014\077\015\074\021\100\037\110\001\002" +
    "\000\056\006\uff37\007\uff37\010\uff37\013\uff37\014\uff37\015" +
    "\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022\uff37\027\uff37" +
    "\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035\uff37\036" +
    "\uff37\037\uff37\061\uff37\062\uff37\001\002\000\056\006\uff06" +
    "\007\uff06\010\uff06\013\uff06\014\uff06\015\uff06\016\uff06\017" +
    "\uff06\020\uff06\021\uff06\022\uff06\027\uff06\030\uff06\031\uff06" +
    "\032\uff06\033\uff06\034\uff06\035\uff06\036\uff06\037\uff06\061" +
    "\uff06\062\uff06\001\002\000\034\003\257\006\114\007\053" +
    "\010\107\014\077\015\074\021\100\037\110\042\012\052" +
    "\004\053\006\055\011\062\261\001\002\000\004\066\254" +
    "\001\002\000\044\003\134\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\046\117\050\102\051\073" +
    "\054\054\056\065\060\076\065\247\067\056\070\116\001" +
    "\002\000\050\003\134\006\114\007\053\010\107\014\077" +
    "\015\074\021\100\037\110\040\123\044\130\046\117\050" +
    "\102\051\073\054\054\056\065\060\076\066\251\067\056" +
    "\070\116\001\002\000\060\003\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\014\uffa0\015\uffa0\021\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\054" +
    "\uffa0\056\uffa0\060\uffa0\062\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\001\002\000\060\003\uff9e\006\uff9e\007\uff9e\010\uff9e\014" +
    "\uff9e\015\uff9e\021\uff9e\037\uff9e\040\uff9e\041\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\054\uff9e\056" +
    "\uff9e\060\uff9e\062\uff9e\066\uff9e\067\uff9e\070\uff9e\001\002" +
    "\000\004\066\253\001\002\000\060\003\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\014\uff9f\015\uff9f\021\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\054\uff9f\056\uff9f\060\uff9f\062\uff9f\066\uff9f\067\uff9f" +
    "\070\uff9f\001\002\000\060\003\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\014\uff9d\015\uff9d\021\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\054" +
    "\uff9d\056\uff9d\060\uff9d\062\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\001\002\000\004\062\277\001\002\000\004\010\274\001" +
    "\002\000\004\065\273\001\002\000\004\062\uff93\001\002" +
    "\000\022\006\114\007\053\010\107\014\077\015\074\021" +
    "\100\037\110\062\262\001\002\000\022\006\114\007\053" +
    "\010\107\014\077\015\074\021\100\022\270\037\110\001" +
    "\002\000\004\062\264\001\002\000\022\006\114\007\053" +
    "\010\107\014\077\015\074\021\100\022\265\037\110\001" +
    "\002\000\044\003\uff97\006\uff97\007\uff97\010\uff97\014\uff97" +
    "\015\uff97\021\uff97\037\uff97\046\uff97\050\uff97\051\uff97\054" +
    "\uff97\056\uff97\060\uff97\065\uff97\067\uff97\070\uff97\001\002" +
    "\000\004\022\267\001\002\000\044\003\uff98\006\uff98\007" +
    "\uff98\010\uff98\014\uff98\015\uff98\021\uff98\037\uff98\046\uff98" +
    "\050\uff98\051\uff98\054\uff98\056\uff98\060\uff98\065\uff98\067" +
    "\uff98\070\uff98\001\002\000\044\003\uff95\006\uff95\007\uff95" +
    "\010\uff95\014\uff95\015\uff95\021\uff95\037\uff95\046\uff95\050" +
    "\uff95\051\uff95\054\uff95\056\uff95\060\uff95\065\uff95\067\uff95" +
    "\070\uff95\001\002\000\004\022\272\001\002\000\044\003" +
    "\uff96\006\uff96\007\uff96\010\uff96\014\uff96\015\uff96\021\uff96" +
    "\037\uff96\046\uff96\050\uff96\051\uff96\054\uff96\056\uff96\060" +
    "\uff96\065\uff96\067\uff96\070\uff96\001\002\000\044\003\uff94" +
    "\006\uff94\007\uff94\010\uff94\014\uff94\015\uff94\021\uff94\037" +
    "\uff94\046\uff94\050\uff94\051\uff94\054\uff94\056\uff94\060\uff94" +
    "\065\uff94\067\uff94\070\uff94\001\002\000\004\013\275\001" +
    "\002\000\020\006\114\007\053\010\212\014\077\015\074" +
    "\021\100\037\110\001\002\000\004\062\uff92\001\002\000" +
    "\022\006\114\007\053\010\107\014\077\015\074\021\100" +
    "\037\110\062\300\001\002\000\022\006\114\007\053\010" +
    "\107\014\077\015\074\021\100\022\307\037\110\001\002" +
    "\000\004\062\302\001\002\000\022\006\114\007\053\010" +
    "\107\014\077\015\074\021\100\022\304\037\110\001\002" +
    "\000\004\022\305\001\002\000\044\003\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\014\uff9a\015\uff9a\021\uff9a\037\uff9a\046\uff9a" +
    "\050\uff9a\051\uff9a\054\uff9a\056\uff9a\060\uff9a\065\uff9a\067" +
    "\uff9a\070\uff9a\001\002\000\044\003\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\014\uff9c\015\uff9c\021\uff9c\037\uff9c\046\uff9c\050" +
    "\uff9c\051\uff9c\054\uff9c\056\uff9c\060\uff9c\065\uff9c\067\uff9c" +
    "\070\uff9c\001\002\000\004\022\310\001\002\000\044\003" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\014\uff9b\015\uff9b\021\uff9b" +
    "\037\uff9b\046\uff9b\050\uff9b\051\uff9b\054\uff9b\056\uff9b\060" +
    "\uff9b\065\uff9b\067\uff9b\070\uff9b\001\002\000\044\003\uff99" +
    "\006\uff99\007\uff99\010\uff99\014\uff99\015\uff99\021\uff99\037" +
    "\uff99\046\uff99\050\uff99\051\uff99\054\uff99\056\uff99\060\uff99" +
    "\065\uff99\067\uff99\070\uff99\001\002\000\026\002\uffce\003" +
    "\uffce\010\uffce\042\uffce\043\uffce\052\uffce\053\uffce\055\uffce" +
    "\057\uffce\062\uffce\001\002\000\004\022\313\001\002\000" +
    "\056\006\uff30\007\uff30\010\uff30\013\uff30\014\uff30\015\uff30" +
    "\016\uff30\017\uff30\020\uff30\021\uff30\022\uff30\027\uff30\030" +
    "\uff30\031\uff30\032\uff30\033\uff30\034\uff30\035\uff30\036\uff30" +
    "\037\uff30\061\uff30\062\uff30\001\002\000\056\006\uff35\007" +
    "\uff35\010\uff35\013\uff35\014\uff35\015\uff35\016\uff35\017\uff35" +
    "\020\uff35\021\uff35\022\uff35\027\uff35\030\uff35\031\uff35\032" +
    "\uff35\033\uff35\034\uff35\035\uff35\036\uff35\037\uff35\061\uff35" +
    "\062\uff35\001\002\000\022\003\321\006\114\007\053\010" +
    "\107\014\077\015\074\021\100\037\110\001\002\000\004" +
    "\066\317\001\002\000\060\003\uff89\006\uff89\007\uff89\010" +
    "\uff89\014\uff89\015\uff89\021\uff89\037\uff89\040\uff89\041\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\054" +
    "\uff89\056\uff89\060\uff89\062\uff89\066\uff89\067\uff89\070\uff89" +
    "\001\002\000\044\003\134\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\046\117\050\102\051\073" +
    "\054\054\056\065\060\076\065\323\067\056\070\116\001" +
    "\002\000\006\022\167\066\322\001\002\000\060\003\uff8a" +
    "\006\uff8a\007\uff8a\010\uff8a\014\uff8a\015\uff8a\021\uff8a\037" +
    "\uff8a\040\uff8a\041\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\051\uff8a\054\uff8a\056\uff8a\060\uff8a\062\uff8a\066" +
    "\uff8a\067\uff8a\070\uff8a\001\002\000\050\003\134\006\114" +
    "\007\053\010\107\014\077\015\074\021\100\037\110\040" +
    "\123\044\130\046\117\050\102\051\073\054\054\056\065" +
    "\060\076\066\325\067\056\070\116\001\002\000\060\003" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\014\uff8d\015\uff8d\021\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\054\uff8d\056\uff8d\060\uff8d\062\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\001\002\000\060\003\uff8b\006" +
    "\uff8b\007\uff8b\010\uff8b\014\uff8b\015\uff8b\021\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\054\uff8b\056\uff8b\060\uff8b\062\uff8b\066\uff8b" +
    "\067\uff8b\070\uff8b\001\002\000\004\066\327\001\002\000" +
    "\060\003\uff8c\006\uff8c\007\uff8c\010\uff8c\014\uff8c\015\uff8c" +
    "\021\uff8c\037\uff8c\040\uff8c\041\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\054\uff8c\056\uff8c\060\uff8c" +
    "\062\uff8c\066\uff8c\067\uff8c\070\uff8c\001\002\000\060\003" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\014\uffb2\015\uffb2\021\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\054\uffb2\056\uffb2\060\uffb2\062\uffb2" +
    "\066\uffb2\067\uffb2\070\uffb2\001\002\000\056\006\uff36\007" +
    "\uff36\010\uff36\013\uff36\014\uff36\015\uff36\016\uff36\017\uff36" +
    "\020\uff36\021\uff36\022\uff36\027\uff36\030\uff36\031\uff36\032" +
    "\uff36\033\uff36\034\uff36\035\uff36\036\uff36\037\uff36\061\uff36" +
    "\062\uff36\001\002\000\022\003\336\006\114\007\053\010" +
    "\107\014\077\015\074\021\100\037\110\001\002\000\004" +
    "\066\334\001\002\000\060\003\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\014\uffa4\015\uffa4\021\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\054" +
    "\uffa4\056\uffa4\060\uffa4\062\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\001\002\000\044\003\134\006\114\007\053\010\107\014" +
    "\077\015\074\021\100\037\110\046\117\050\102\051\073" +
    "\054\054\056\065\060\076\065\340\067\056\070\116\001" +
    "\002\000\006\022\167\066\337\001\002\000\060\003\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\014\uffa5\015\uffa5\021\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\054\uffa5\056\uffa5\060\uffa5\062\uffa5\066" +
    "\uffa5\067\uffa5\070\uffa5\001\002\000\044\003\134\006\114" +
    "\007\053\010\107\014\077\015\074\021\100\037\110\046" +
    "\117\050\102\051\073\054\054\056\065\060\076\066\342" +
    "\067\056\070\116\001\002\000\060\003\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\014\uffa8\015\uffa8\021\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\054\uffa8\056\uffa8\060\uffa8\062\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\001\002\000\060\003\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\014\uffa6\015\uffa6\021\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\054" +
    "\uffa6\056\uffa6\060\uffa6\062\uffa6\066\uffa6\067\uffa6\070\uffa6" +
    "\001\002\000\004\066\344\001\002\000\060\003\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\014\uffa7\015\uffa7\021\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\054\uffa7\056\uffa7\060\uffa7\062\uffa7\066\uffa7" +
    "\067\uffa7\070\uffa7\001\002\000\006\062\uffb8\066\uffb8\001" +
    "\002\000\004\062\351\001\002\000\046\003\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\014\uffc3\015\uffc3\021\uffc3\037\uffc3\046" +
    "\uffc3\050\uffc3\051\uffc3\054\uffc3\056\uffc3\060\uffc3\062\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\001\002\000\010\013\355\061" +
    "\356\062\uffbe\001\002\000\060\003\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\014\uffbf\015\uffbf\021\uffbf\037\uffbf\042\012\043" +
    "\010\046\uffbf\050\uffbf\051\uffbf\052\004\053\006\054\uffbf" +
    "\055\011\056\uffbf\060\uffbf\062\uffbf\066\uffbf\067\uffbf\070" +
    "\uffbf\001\002\000\004\062\351\001\002\000\046\003\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\014\uffc6\015\uffc6\021\uffc6\037" +
    "\uffc6\046\uffc6\050\uffc6\051\uffc6\054\uffc6\056\uffc6\060\uffc6" +
    "\062\uffc6\066\uffc6\067\uffc6\070\uffc6\001\002\000\046\003" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\014\uffc0\015\uffc0\021\uffc0" +
    "\037\uffc0\046\uffc0\050\uffc0\051\uffc0\054\uffc0\056\uffc0\060" +
    "\uffc0\062\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\020" +
    "\006\114\007\053\010\212\014\077\015\074\021\100\037" +
    "\110\001\002\000\004\010\350\001\002\000\004\062\uffbb" +
    "\001\002\000\004\062\uffbd\001\002\000\004\062\uffb9\001" +
    "\002\000\006\061\356\062\uffba\001\002\000\004\062\uffbc" +
    "\001\002\000\046\003\uffc2\006\uffc2\007\uffc2\010\uffc2\014" +
    "\uffc2\015\uffc2\021\uffc2\037\uffc2\046\uffc2\050\uffc2\051\uffc2" +
    "\054\uffc2\056\uffc2\060\uffc2\062\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\001\002\000\020\003\376\006\373\010\377\014\u0103" +
    "\015\374\021\u0104\037\110\001\002\000\004\066\367\001" +
    "\002\000\060\003\uff7f\006\uff7f\007\uff7f\010\uff7f\014\uff7f" +
    "\015\uff7f\021\uff7f\037\uff7f\040\uff7f\041\uff7f\044\uff7f\045" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\054\uff7f\056\uff7f" +
    "\060\uff7f\062\uff7f\066\uff7f\067\uff7f\070\uff7f\001\002\000" +
    "\036\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f\022\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035" +
    "\uff6f\036\uff6f\001\002\000\036\014\164\015\151\016\161" +
    "\017\144\020\155\022\u014f\027\153\030\163\031\154\032" +
    "\146\033\156\034\160\035\147\036\152\001\002\000\036" +
    "\014\164\015\151\016\161\017\144\020\155\022\uff6a\027" +
    "\153\030\163\031\154\032\146\033\156\034\160\035\147" +
    "\036\152\001\002\000\036\014\uff68\015\uff68\016\uff68\017" +
    "\uff68\020\uff68\022\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\033\uff68\034\uff68\035\uff68\036\uff68\001\002\000\016\006" +
    "\373\010\u0106\014\u0103\015\374\021\u0104\037\110\001\002" +
    "\000\036\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\022" +
    "\uff72\027\uff72\030\uff72\031\uff72\032\uff72\033\uff72\034\uff72" +
    "\035\uff72\036\uff72\001\002\000\006\022\u0149\066\u0148\001" +
    "\002\000\056\011\205\012\206\013\233\014\uff67\015\uff67" +
    "\016\uff67\017\uff67\020\uff67\021\u0107\022\uff67\023\231\024" +
    "\224\025\223\026\230\027\uff67\030\uff67\031\uff67\032\uff67" +
    "\033\uff67\034\uff67\035\uff67\036\uff67\001\002\000\036\014" +
    "\uff73\015\uff73\016\uff73\017\uff73\020\uff73\022\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036" +
    "\uff73\001\002\000\016\006\373\010\u0106\014\u0103\015\374" +
    "\021\u0104\037\110\001\002\000\004\065\u010d\001\002\000" +
    "\016\006\373\010\u0106\014\u0103\015\374\021\u0104\037\110" +
    "\001\002\000\016\006\373\010\u0106\014\u0103\015\374\021" +
    "\u0104\037\110\001\002\000\004\022\u010b\001\002\000\040" +
    "\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67\021\u0107\022" +
    "\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\001\002\000\022\006\114\007\053\010" +
    "\212\014\077\015\074\021\100\022\u0109\037\110\001\002" +
    "\000\004\022\u010a\001\002\000\036\014\uff70\015\uff70\016" +
    "\uff70\017\uff70\020\uff70\022\uff70\027\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\001\002\000" +
    "\036\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\022\uff71" +
    "\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035" +
    "\uff71\036\uff71\001\002\000\036\014\uff69\015\uff69\016\uff69" +
    "\017\uff69\020\uff69\022\uff69\027\uff69\030\uff69\031\uff69\032" +
    "\uff69\033\uff69\034\uff69\035\uff69\036\uff69\001\002\000\036" +
    "\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\022\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\001\002\000\054\003\u0115\006\114\007\053\010" +
    "\107\014\077\015\074\021\100\037\110\040\123\041\u0117" +
    "\044\130\045\u0111\046\117\050\102\051\073\054\054\056" +
    "\065\060\076\066\u010f\067\056\070\116\001\002\000\054" +
    "\003\uff5a\006\114\007\053\010\107\014\077\015\074\021" +
    "\100\037\110\040\123\041\u0117\044\130\045\uff5a\046\117" +
    "\050\102\051\073\054\054\056\065\060\076\066\uff5a\067" +
    "\056\070\116\001\002\000\060\003\uff80\006\uff80\007\uff80" +
    "\010\uff80\014\uff80\015\uff80\021\uff80\037\uff80\040\uff80\041" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80" +
    "\054\uff80\056\uff80\060\uff80\062\uff80\066\uff80\067\uff80\070" +
    "\uff80\001\002\000\010\003\u0139\045\u0111\066\u013a\001\002" +
    "\000\004\064\u0135\001\002\000\004\062\u0134\001\002\000" +
    "\004\062\u0133\001\002\000\004\062\u0132\001\002\000\052" +
    "\006\114\007\053\010\107\014\077\015\074\021\100\037" +
    "\110\040\123\041\u0117\044\130\045\u0111\046\117\050\102" +
    "\051\073\054\054\056\065\060\076\066\u012a\067\056\070" +
    "\116\001\002\000\054\003\uff5f\006\uff5f\007\uff5f\010\uff5f" +
    "\014\uff5f\015\uff5f\021\uff5f\037\uff5f\040\uff5f\041\uff5f\044" +
    "\uff5f\045\uff5f\046\uff5f\050\uff5f\051\uff5f\054\uff5f\056\uff5f" +
    "\060\uff5f\066\uff5f\067\uff5f\070\uff5f\001\002\000\004\006" +
    "\u0123\001\002\000\054\003\uff64\006\114\007\053\010\107" +
    "\014\077\015\074\021\100\037\110\040\123\041\u0117\044" +
    "\130\045\uff64\046\117\050\102\051\073\054\054\056\065" +
    "\060\076\066\uff64\067\056\070\116\001\002\000\050\006" +
    "\114\007\053\010\107\014\077\015\074\021\100\037\110" +
    "\040\123\041\u0117\044\130\046\117\050\102\051\073\054" +
    "\054\056\065\060\076\066\u011f\067\056\070\116\001\002" +
    "\000\004\062\u011e\001\002\000\004\062\u011d\001\002\000" +
    "\010\003\uff65\045\uff65\066\uff65\001\002\000\054\003\uff61" +
    "\006\uff61\007\uff61\010\uff61\014\uff61\015\uff61\021\uff61\037" +
    "\uff61\040\uff61\041\uff61\044\uff61\045\uff61\046\uff61\050\uff61" +
    "\051\uff61\054\uff61\056\uff61\060\uff61\066\uff61\067\uff61\070" +
    "\uff61\001\002\000\054\003\uff5d\006\uff5d\007\uff5d\010\uff5d" +
    "\014\uff5d\015\uff5d\021\uff5d\037\uff5d\040\uff5d\041\uff5d\044" +
    "\uff5d\045\uff5d\046\uff5d\050\uff5d\051\uff5d\054\uff5d\056\uff5d" +
    "\060\uff5d\066\uff5d\067\uff5d\070\uff5d\001\002\000\060\003" +
    "\uff81\006\uff81\007\uff81\010\uff81\014\uff81\015\uff81\021\uff81" +
    "\037\uff81\040\uff81\041\uff81\044\uff81\045\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\054\uff81\056\uff81\060\uff81\062\uff81" +
    "\066\uff81\067\uff81\070\uff81\001\002\000\004\066\u0121\001" +
    "\002\000\060\003\uff84\006\uff84\007\uff84\010\uff84\014\uff84" +
    "\015\uff84\021\uff84\037\uff84\040\uff84\041\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\054\uff84\056\uff84" +
    "\060\uff84\062\uff84\066\uff84\067\uff84\070\uff84\001\002\000" +
    "\010\003\uff66\045\uff66\066\uff66\001\002\000\004\064\u0124" +
    "\001\002\000\050\006\114\007\053\010\107\014\077\015" +
    "\074\021\100\037\110\040\123\041\u0117\044\130\046\117" +
    "\050\102\051\073\054\054\056\065\060\076\062\u0127\067" +
    "\056\070\116\001\002\000\054\003\uff56\006\uff56\007\uff56" +
    "\010\uff56\014\uff56\015\uff56\021\uff56\037\uff56\040\uff56\041" +
    "\uff56\044\uff56\045\uff56\046\uff56\050\uff56\051\uff56\054\uff56" +
    "\056\uff56\060\uff56\066\uff56\067\uff56\070\uff56\001\002\000" +
    "\054\003\uff57\006\uff57\007\uff57\010\uff57\014\uff57\015\uff57" +
    "\021\uff57\037\uff57\040\uff57\041\uff57\044\uff57\045\uff57\046" +
    "\uff57\050\uff57\051\uff57\054\uff57\056\uff57\060\uff57\066\uff57" +
    "\067\uff57\070\uff57\001\002\000\054\003\uff55\006\uff55\007" +
    "\uff55\010\uff55\014\uff55\015\uff55\021\uff55\037\uff55\040\uff55" +
    "\041\uff55\044\uff55\045\uff55\046\uff55\050\uff55\051\uff55\054" +
    "\uff55\056\uff55\060\uff55\066\uff55\067\uff55\070\uff55\001\002" +
    "\000\054\003\uff62\006\114\007\053\010\107\014\077\015" +
    "\074\021\100\037\110\040\123\041\uff62\044\130\045\uff62" +
    "\046\117\050\102\051\073\054\054\056\065\060\076\066" +
    "\uff62\067\056\070\116\001\002\000\054\003\uff63\006\uff63" +
    "\007\uff63\010\uff63\014\uff63\015\uff63\021\uff63\037\uff63\040" +
    "\uff63\041\uff63\044\uff63\045\uff63\046\uff63\050\uff63\051\uff63" +
    "\054\uff63\056\uff63\060\uff63\066\uff63\067\uff63\070\uff63\001" +
    "\002\000\060\003\uff7d\006\uff7d\007\uff7d\010\uff7d\014\uff7d" +
    "\015\uff7d\021\uff7d\037\uff7d\040\uff7d\041\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\054\uff7d\056\uff7d" +
    "\060\uff7d\062\uff7d\066\uff7d\067\uff7d\070\uff7d\001\002\000" +
    "\004\045\u0111\001\002\000\050\006\114\007\053\010\107" +
    "\014\077\015\074\021\100\037\110\040\123\041\u0117\044" +
    "\130\046\117\050\102\051\073\054\054\056\065\060\076" +
    "\066\u012d\067\056\070\116\001\002\000\060\003\uff7c\006" +
    "\uff7c\007\uff7c\010\uff7c\014\uff7c\015\uff7c\021\uff7c\037\uff7c" +
    "\040\uff7c\041\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\054\uff7c\056\uff7c\060\uff7c\062\uff7c\066\uff7c" +
    "\067\uff7c\070\uff7c\001\002\000\004\066\u012f\001\002\000" +
    "\060\003\uff7b\006\uff7b\007\uff7b\010\uff7b\014\uff7b\015\uff7b" +
    "\021\uff7b\037\uff7b\040\uff7b\041\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\051\uff7b\054\uff7b\056\uff7b\060\uff7b" +
    "\062\uff7b\066\uff7b\067\uff7b\070\uff7b\001\002\000\004\066" +
    "\u0131\001\002\000\060\003\uff7a\006\uff7a\007\uff7a\010\uff7a" +
    "\014\uff7a\015\uff7a\021\uff7a\037\uff7a\040\uff7a\041\uff7a\044" +
    "\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\054\uff7a" +
    "\056\uff7a\060\uff7a\062\uff7a\066\uff7a\067\uff7a\070\uff7a\001" +
    "\002\000\054\003\uff5c\006\uff5c\007\uff5c\010\uff5c\014\uff5c" +
    "\015\uff5c\021\uff5c\037\uff5c\040\uff5c\041\uff5c\044\uff5c\045" +
    "\uff5c\046\uff5c\050\uff5c\051\uff5c\054\uff5c\056\uff5c\060\uff5c" +
    "\066\uff5c\067\uff5c\070\uff5c\001\002\000\054\003\uff60\006" +
    "\uff60\007\uff60\010\uff60\014\uff60\015\uff60\021\uff60\037\uff60" +
    "\040\uff60\041\uff60\044\uff60\045\uff60\046\uff60\050\uff60\051" +
    "\uff60\054\uff60\056\uff60\060\uff60\066\uff60\067\uff60\070\uff60" +
    "\001\002\000\054\003\uff5e\006\uff5e\007\uff5e\010\uff5e\014" +
    "\uff5e\015\uff5e\021\uff5e\037\uff5e\040\uff5e\041\uff5e\044\uff5e" +
    "\045\uff5e\046\uff5e\050\uff5e\051\uff5e\054\uff5e\056\uff5e\060" +
    "\uff5e\066\uff5e\067\uff5e\070\uff5e\001\002\000\050\006\114" +
    "\007\053\010\107\014\077\015\074\021\100\037\110\040" +
    "\123\041\u0117\044\130\046\117\050\102\051\073\054\054" +
    "\056\065\060\076\062\u0138\067\056\070\116\001\002\000" +
    "\050\006\uff53\007\uff53\010\uff53\014\uff53\015\uff53\021\uff53" +
    "\037\uff53\040\uff53\041\uff53\044\uff53\046\uff53\050\uff53\051" +
    "\uff53\054\uff53\056\uff53\060\uff53\066\uff53\067\uff53\070\uff53" +
    "\001\002\000\050\006\uff54\007\uff54\010\uff54\014\uff54\015" +
    "\uff54\021\uff54\037\uff54\040\uff54\041\uff54\044\uff54\046\uff54" +
    "\050\uff54\051\uff54\054\uff54\056\uff54\060\uff54\066\uff54\067" +
    "\uff54\070\uff54\001\002\000\050\006\uff52\007\uff52\010\uff52" +
    "\014\uff52\015\uff52\021\uff52\037\uff52\040\uff52\041\uff52\044" +
    "\uff52\046\uff52\050\uff52\051\uff52\054\uff52\056\uff52\060\uff52" +
    "\066\uff52\067\uff52\070\uff52\001\002\000\050\006\114\007" +
    "\053\010\107\014\077\015\074\021\100\037\110\040\123" +
    "\041\u0117\044\130\045\u0111\046\117\050\102\051\073\054" +
    "\054\056\065\060\076\067\056\070\116\001\002\000\060" +
    "\003\uff85\006\uff85\007\uff85\010\uff85\014\uff85\015\uff85\021" +
    "\uff85\037\uff85\040\uff85\041\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\054\uff85\056\uff85\060\uff85\062" +
    "\uff85\066\uff85\067\uff85\070\uff85\001\002\000\050\006\114" +
    "\007\053\010\107\014\077\015\074\021\100\037\110\040" +
    "\123\041\u0117\044\130\046\117\050\102\051\073\054\054" +
    "\056\065\060\076\066\u013c\067\056\070\116\001\002\000" +
    "\060\003\uff83\006\uff83\007\uff83\010\uff83\014\uff83\015\uff83" +
    "\021\uff83\037\uff83\040\uff83\041\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\050\uff83\051\uff83\054\uff83\056\uff83\060\uff83" +
    "\062\uff83\066\uff83\067\uff83\070\uff83\001\002\000\004\066" +
    "\u013e\001\002\000\060\003\uff82\006\uff82\007\uff82\010\uff82" +
    "\014\uff82\015\uff82\021\uff82\037\uff82\040\uff82\041\uff82\044" +
    "\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\054\uff82" +
    "\056\uff82\060\uff82\062\uff82\066\uff82\067\uff82\070\uff82\001" +
    "\002\000\004\045\u0111\001\002\000\050\006\114\007\053" +
    "\010\107\014\077\015\074\021\100\037\110\040\123\041" +
    "\u0117\044\130\046\117\050\102\051\073\054\054\056\065" +
    "\060\076\066\u0141\067\056\070\116\001\002\000\060\003" +
    "\uff78\006\uff78\007\uff78\010\uff78\014\uff78\015\uff78\021\uff78" +
    "\037\uff78\040\uff78\041\uff78\044\uff78\045\uff78\046\uff78\047" +
    "\uff78\050\uff78\051\uff78\054\uff78\056\uff78\060\uff78\062\uff78" +
    "\066\uff78\067\uff78\070\uff78\001\002\000\004\066\u0143\001" +
    "\002\000\060\003\uff77\006\uff77\007\uff77\010\uff77\014\uff77" +
    "\015\uff77\021\uff77\037\uff77\040\uff77\041\uff77\044\uff77\045" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\054\uff77\056\uff77" +
    "\060\uff77\062\uff77\066\uff77\067\uff77\070\uff77\001\002\000" +
    "\004\066\u0145\001\002\000\060\003\uff79\006\uff79\007\uff79" +
    "\010\uff79\014\uff79\015\uff79\021\uff79\037\uff79\040\uff79\041" +
    "\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79" +
    "\054\uff79\056\uff79\060\uff79\062\uff79\066\uff79\067\uff79\070" +
    "\uff79\001\002\000\010\003\uff5b\045\uff5b\066\uff5b\001\002" +
    "\000\036\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\022" +
    "\uff6b\027\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b" +
    "\035\uff6b\036\uff6b\001\002\000\060\003\uff7e\006\uff7e\007" +
    "\uff7e\010\uff7e\014\uff7e\015\uff7e\021\uff7e\037\uff7e\040\uff7e" +
    "\041\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\054\uff7e\056\uff7e\060\uff7e\062\uff7e\066\uff7e\067\uff7e" +
    "\070\uff7e\001\002\000\006\022\uff74\065\uff74\001\002\000" +
    "\036\014\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\022\uff6d" +
    "\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\034\uff6d\035" +
    "\uff6d\036\uff6d\001\002\000\016\006\373\010\u014d\014\u0103" +
    "\015\374\021\u0104\037\110\001\002\000\036\014\uff6e\015" +
    "\uff6e\016\uff6e\017\uff6e\020\uff6e\022\uff6e\027\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\001" +
    "\002\000\036\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67" +
    "\022\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034" +
    "\uff67\035\uff67\036\uff67\001\002\000\020\003\u0150\006\373" +
    "\010\377\014\u0103\015\374\021\u0104\037\110\001\002\000" +
    "\006\022\uff75\065\uff75\001\002\000\004\022\u0149\001\002" +
    "\000\004\022\u0152\001\002\000\006\022\uff76\065\uff76\001" +
    "\002\000\060\003\uffb5\006\uffb5\007\uffb5\010\uffb5\014\uffb5" +
    "\015\uffb5\021\uffb5\037\uffb5\040\uffb5\041\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\054\uffb5\056\uffb5" +
    "\060\uffb5\062\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002\000" +
    "\026\002\uffd2\003\uffd2\010\uffd2\042\uffd2\043\uffd2\052\uffd2" +
    "\053\uffd2\055\uffd2\057\uffd2\062\uffd2\001\002\000\004\066" +
    "\u0156\001\002\000\026\002\uffd0\003\uffd0\010\uffd0\042\uffd0" +
    "\043\uffd0\052\uffd0\053\uffd0\055\uffd0\057\uffd0\062\uffd0\001" +
    "\002\000\044\003\134\006\114\007\053\010\107\014\077" +
    "\015\074\021\100\037\110\046\117\050\102\051\073\054" +
    "\054\056\065\060\076\065\u0159\067\056\070\116\001\002" +
    "\000\060\003\uffaa\006\uffaa\007\uffaa\010\uffaa\014\uffaa\015" +
    "\uffaa\021\uffaa\037\uffaa\040\uffaa\041\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\054\uffaa\056\uffaa\060" +
    "\uffaa\062\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002\000\042" +
    "\003\134\006\114\007\053\010\107\014\077\015\074\021" +
    "\100\037\110\046\117\050\102\051\073\054\054\056\065" +
    "\060\076\067\056\070\116\001\002\000\060\003\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\014\uffa3\015\uffa3\021\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\054\uffa3\056\uffa3\060\uffa3\062\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\001\002\000\060\003\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\014\uffa2\015\uffa2\021\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\054\uffa2\056\uffa2\060\uffa2\062\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\001\002\000\004\066\u015d\001\002\000\060\003" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\014\uffa1\015\uffa1\021\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\044\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\054\uffa1\056\uffa1\060\uffa1\062\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\001\002\000\060\003\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\014\uffb3\015\uffb3\021\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\054\uffb3\056\uffb3\060\uffb3\062\uffb3\066\uffb3" +
    "\067\uffb3\070\uffb3\001\002\000\006\010\u0160\022\u0161\001" +
    "\002\000\004\022\u0162\001\002\000\004\062\uff48\001\002" +
    "\000\004\062\uff47\001\002\000\020\006\114\007\053\010" +
    "\107\014\077\015\074\021\100\037\110\001\002\000\004" +
    "\062\uff3f\001\002\000\004\062\uff3d\001\002\000\022\006" +
    "\114\007\053\010\107\014\077\015\074\021\100\037\110" +
    "\061\u0163\001\002\000\004\062\uff3c\001\002\000\056\006" +
    "\uff34\007\uff34\010\uff34\013\uff34\014\uff34\015\uff34\016\uff34" +
    "\017\uff34\020\uff34\021\uff34\022\uff34\027\uff34\030\uff34\031" +
    "\uff34\032\uff34\033\uff34\034\uff34\035\uff34\036\uff34\037\uff34" +
    "\061\uff34\062\uff34\001\002\000\010\003\uff15\010\uff15\062" +
    "\uff15\001\002\000\004\062\351\001\002\000\046\003\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\014\uffc4\015\uffc4\021\uffc4\037" +
    "\uffc4\046\uffc4\050\uffc4\051\uffc4\054\uffc4\056\uffc4\060\uffc4" +
    "\062\uffc4\066\uffc4\067\uffc4\070\uffc4\001\002\000\004\062" +
    "\351\001\002\000\046\003\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\014\uffc5\015\uffc5\021\uffc5\037\uffc5\046\uffc5\050\uffc5\051" +
    "\uffc5\054\uffc5\056\uffc5\060\uffc5\062\uffc5\066\uffc5\067\uffc5" +
    "\070\uffc5\001\002\000\046\003\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\014\uffc1\015\uffc1\021\uffc1\037\uffc1\046\uffc1\050\uffc1" +
    "\051\uffc1\054\uffc1\056\uffc1\060\uffc1\062\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\001\002\000\006\062\027\066\u0170\001\002" +
    "\000\026\002\uffd1\003\uffd1\010\uffd1\042\uffd1\043\uffd1\052" +
    "\uffd1\053\uffd1\055\uffd1\057\uffd1\062\uffd1\001\002\000\004" +
    "\066\u0172\001\002\000\026\002\uffcf\003\uffcf\010\uffcf\042" +
    "\uffcf\043\uffcf\052\uffcf\053\uffcf\055\uffcf\057\uffcf\062\uffcf" +
    "\001\002\000\026\002\uffcd\003\uffcd\010\uffcd\042\uffcd\043" +
    "\uffcd\052\uffcd\053\uffcd\055\uffcd\057\uffcd\062\uffcd\001\002" +
    "\000\006\003\045\065\046\001\002\000\026\002\uffd5\003" +
    "\uffd5\010\uffd5\042\uffd5\043\uffd5\052\uffd5\053\uffd5\055\uffd5" +
    "\057\uffd5\062\uffd5\001\002\000\010\003\u0177\022\uffcb\061" +
    "\u0178\001\002\000\012\042\012\052\004\053\006\055\011" +
    "\001\002\000\012\042\012\052\004\053\006\055\011\001" +
    "\002\000\004\022\uffcc\001\002\000\004\022\uffca\001\002" +
    "\000\026\002\uffd3\003\uffd3\010\uffd3\042\uffd3\043\uffd3\052" +
    "\uffd3\053\uffd3\055\uffd3\057\uffd3\062\uffd3\001\002\000\010" +
    "\003\uff16\010\uff16\062\uff16\001\002\000\004\002\ufff9\001" +
    "\002\000\004\062\uffe2\001\002\000\022\003\ufff2\010\ufff2" +
    "\042\ufff2\043\ufff2\052\ufff2\053\ufff2\055\ufff2\057\ufff2\001" +
    "\002\000\016\006\u0189\007\u0187\014\u018a\015\u018b\021\u0186" +
    "\037\110\001\002\000\010\013\u0180\061\uffde\062\uffde\001" +
    "\002\000\026\002\uffe7\003\uffe7\010\uffe7\042\uffe7\043\uffe7" +
    "\052\uffe7\053\uffe7\055\uffe7\057\uffe7\062\uffe7\001\002\000" +
    "\032\003\u0183\010\015\013\u0180\042\012\043\010\052\004" +
    "\053\006\055\011\057\026\062\027\065\046\066\u0173\001" +
    "\002\000\004\002\ufffa\001\002\000\006\061\uffdf\062\uffdf" +
    "\001\002\000\016\006\u0189\007\u0187\014\u018a\015\u018b\021" +
    "\u0186\037\110\001\002\000\024\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\022\uffd6\061\uffd6\062\uffd6\001" +
    "\002\000\020\006\114\007\053\010\212\014\077\015\074" +
    "\021\100\037\110\001\002\000\024\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7\061\uffd7\062\uffd7" +
    "\001\002\000\020\006\114\007\053\010\212\014\077\015" +
    "\074\021\100\037\110\001\002\000\020\006\114\007\053" +
    "\010\212\014\077\015\074\021\100\037\110\001\002\000" +
    "\022\013\uffdd\014\164\015\151\016\161\017\144\020\155" +
    "\061\uffdd\062\uffdd\001\002\000\016\006\u0189\007\u0187\014" +
    "\u018a\015\u018b\021\u0186\037\110\001\002\000\024\013\uffdb" +
    "\014\164\015\151\016\161\017\144\020\155\022\uffdb\061" +
    "\uffdb\062\uffdb\001\002\000\024\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\022\uffda\061\uffda\062\uffda\001" +
    "\002\000\024\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\022\uffd9\061\uffd9\062\uffd9\001\002\000\024\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\061\uffd8\062\uffd8\001\002\000\016\014\164\015\151\016" +
    "\161\017\144\020\155\022\u0193\001\002\000\024\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\061" +
    "\uffdc\062\uffdc\001\002\000\012\003\uff0e\010\uff0e\043\uff0e" +
    "\062\uff0e\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\ufffc\001\002\000\010\003\u01a1\010\u01a2\062\027\001\002" +
    "\000\010\013\u0180\061\u019b\062\uffe5\001\002\000\026\003" +
    "\023\010\015\013\u0180\042\012\043\010\052\004\053\006" +
    "\055\011\057\026\062\027\001\002\000\004\002\ufffe\001" +
    "\002\000\006\003\u019e\010\u0198\001\002\000\006\061\u019d" +
    "\062\uffe6\001\002\000\006\003\u019e\010\u0198\001\002\000" +
    "\004\013\u0180\001\002\000\004\062\uffe4\001\002\000\004" +
    "\062\uffe3\001\002\000\004\062\027\001\002\000\010\013" +
    "\u0180\061\u01a4\062\027\001\002\000\022\003\ufff3\010\ufff3" +
    "\042\ufff3\043\ufff3\052\ufff3\053\ufff3\055\ufff3\057\ufff3\001" +
    "\002\000\006\003\u019e\010\u0198\001\002\000\006\061\u01a7" +
    "\062\027\001\002\000\022\003\ufff6\010\ufff6\042\ufff6\043" +
    "\ufff6\052\ufff6\053\ufff6\055\ufff6\057\ufff6\001\002\000\006" +
    "\003\u019e\010\u0198\001\002\000\022\003\ufff7\010\ufff7\042" +
    "\ufff7\043\ufff7\052\ufff7\053\ufff7\055\ufff7\057\ufff7\001\002" +
    "\000\004\062\027\001\002\000\022\003\ufff5\010\ufff5\042" +
    "\ufff5\043\ufff5\052\ufff5\053\ufff5\055\ufff5\057\ufff5\001\002" +
    "\000\004\062\027\001\002\000\022\003\ufff4\010\ufff4\042" +
    "\ufff4\043\ufff4\052\ufff4\053\ufff4\055\ufff4\057\ufff4\001\002" +
    "\000\022\003\ufff1\010\ufff1\042\ufff1\043\ufff1\052\ufff1\053" +
    "\ufff1\055\ufff1\057\ufff1\001\002\000\016\003\040\022\043" +
    "\042\012\052\004\053\006\055\011\001\002\000\026\002" +
    "\uffe9\003\uffe9\010\uffe9\042\uffe9\043\uffe9\052\uffe9\053\uffe9" +
    "\055\uffe9\057\uffe9\062\uffe9\001\002\000\004\010\u01b6\001" +
    "\002\000\024\002\uffec\003\u01b3\010\u01b2\042\012\043\010" +
    "\052\004\053\006\055\011\057\026\001\002\000\004\021" +
    "\u01ae\001\002\000\006\003\045\065\046\001\002\000\004" +
    "\002\uffed\001\002\000\004\002\uffee\001\002\000\004\021" +
    "\u01b7\001\002\000\016\003\040\022\043\042\012\052\004" +
    "\053\006\055\011\001\002\000\026\002\uffea\003\uffea\010" +
    "\uffea\042\uffea\043\uffea\052\uffea\053\uffea\055\uffea\057\uffea" +
    "\062\uffea\001\002\000\012\013\u0180\021\u01b7\061\u01a4\062" +
    "\027\001\002\000\020\003\uff13\010\uff13\042\uff13\052\uff13" +
    "\053\uff13\055\uff13\062\uff13\001\002\000\014\003\uff0d\010" +
    "\uff0d\043\uff0d\052\uff0a\062\uff0d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b9\000\034\002\027\003\015\004\030\006\012\100" +
    "\006\101\016\104\023\105\004\106\020\107\021\110\013" +
    "\111\017\112\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\112\u01b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\111" +
    "\u01a2\001\001\000\022\006\u01af\100\006\101\016\105\u01b3" +
    "\107\021\110\013\111\u01b0\112\024\001\001\000\006\007" +
    "\u019b\010\u0180\001\001\000\002\001\001\000\004\112\u0168" +
    "\001\001\000\022\004\030\006\u0196\100\006\101\016\104" +
    "\u0199\106\020\107\021\112\024\001\001\000\026\004\030" +
    "\006\012\100\006\101\016\104\u0195\105\u0194\106\020\107" +
    "\021\110\013\112\024\001\001\000\002\001\001\000\036" +
    "\004\030\006\012\007\u017d\010\u0180\013\u0181\100\006\101" +
    "\016\104\u0183\105\u017c\106\020\107\021\110\013\111\u017e" +
    "\112\024\001\001\000\002\001\001\000\006\101\u017b\107" +
    "\021\001\001\000\002\001\001\000\004\111\033\001\001" +
    "\000\002\001\001\000\004\111\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\036\014\041\101\040\107\021\001\001\000" +
    "\002\001\001\000\004\013\u017a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\015\062\016\110\022\054" +
    "\023\067\024\114\025\102\026\070\027\057\032\061\035" +
    "\047\036\063\037\111\056\056\057\105\060\060\061\104" +
    "\064\074\067\071\070\065\071\103\100\066\101\050\102" +
    "\112\107\021\111\046\112\024\113\051\001\001\000\066" +
    "\015\u016e\016\110\022\054\023\067\024\114\025\102\026" +
    "\070\027\057\032\061\035\047\036\063\037\111\056\056" +
    "\057\105\060\060\061\104\064\074\067\071\070\065\071" +
    "\103\100\066\101\050\102\112\107\021\112\024\113\051" +
    "\001\001\000\002\001\001\000\010\017\u016b\103\u016a\112" +
    "\u0168\001\001\000\014\067\u0167\070\065\071\103\102\112" +
    "\113\051\001\001\000\002\001\001\000\022\024\u0164\061" +
    "\104\065\u0163\067\071\070\065\071\103\102\112\113\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\u0154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\351\103\346" +
    "\001\001\000\052\022\344\023\067\024\114\025\102\026" +
    "\070\027\057\032\061\035\047\036\063\037\111\056\056" +
    "\057\105\060\060\061\104\064\074\067\071\070\065\071" +
    "\103\102\112\113\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\067\330\070\065\071" +
    "\103\102\112\113\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\067\313\070\065\071\103\102\112\113" +
    "\051\001\001\000\014\067\311\070\065\071\103\102\112" +
    "\113\051\001\001\000\002\001\001\000\004\033\245\001" +
    "\001\000\002\001\001\000\010\073\240\074\147\077\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\062" +
    "\226\066\225\075\224\076\231\001\001\000\004\113\221" +
    "\001\001\000\052\022\220\023\067\024\114\025\102\026" +
    "\070\027\057\032\061\035\047\036\063\037\111\056\056" +
    "\057\105\060\060\061\104\064\074\067\071\070\065\071" +
    "\103\102\112\113\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\023\123\024\114\025\102" +
    "\026\070\027\057\032\061\034\121\035\047\036\063\037" +
    "\111\051\130\053\126\054\124\056\056\057\105\060\060" +
    "\061\104\064\074\067\071\070\065\071\103\102\112\113" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\023\123\024\114\025\102\026\070\027" +
    "\057\032\061\034\167\035\047\036\063\037\111\051\130" +
    "\053\126\054\124\056\056\057\105\060\060\061\104\064" +
    "\074\067\071\070\065\071\103\102\112\113\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\023\123\024\114" +
    "\025\102\026\070\027\057\032\061\034\132\035\047\036" +
    "\063\037\111\051\130\053\126\054\124\056\056\057\105" +
    "\060\060\061\104\064\074\067\071\070\065\071\103\102" +
    "\112\113\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\024\142\055\140\061\104\067\071\070\065\071\103" +
    "\102\112\113\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\073\144\074\147\077\156\001\001\000\002" +
    "\001\001\000\022\024\142\055\164\061\104\067\071\070" +
    "\065\071\103\102\112\113\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\142\055\173\061\104\067\071\070" +
    "\065\071\103\102\112\113\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\142\055\176\061\104\067" +
    "\071\070\065\071\103\102\112\113\051\001\001\000\002" +
    "\001\001\000\014\067\201\070\065\071\103\102\112\113" +
    "\051\001\001\000\004\076\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\067\213\070\065\071\103\072" +
    "\210\102\112\113\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\067\213\070\065\071\103\072\215\102\112\113" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\067\237\070\065\071\103" +
    "\102\112\113\051\001\001\000\002\001\001\000\004\063" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\062\226\066\225" +
    "\075\224\076\231\001\001\000\002\001\001\000\012\070" +
    "\241\071\103\102\112\113\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\024\257\061\104\067\071\070" +
    "\065\071\103\101\255\102\112\107\021\113\051\123\254" +
    "\001\001\000\002\001\001\000\050\023\247\024\114\025" +
    "\102\026\070\027\057\032\061\035\047\036\063\037\111" +
    "\056\056\057\105\060\060\061\104\064\074\067\071\070" +
    "\065\071\103\102\112\113\051\001\001\000\060\023\123" +
    "\024\114\025\102\026\070\027\057\032\061\034\251\035" +
    "\047\036\063\037\111\051\130\053\126\054\124\056\056" +
    "\057\105\060\060\061\104\064\074\067\071\070\065\071" +
    "\103\102\112\113\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\262\061\104\067\071\070" +
    "\065\071\103\102\112\113\051\001\001\000\020\024\270" +
    "\061\104\067\071\070\065\071\103\102\112\113\051\001" +
    "\001\000\002\001\001\000\020\024\265\061\104\067\071" +
    "\070\065\071\103\102\112\113\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\067\275\070\065\071\103\102\112" +
    "\113\051\001\001\000\002\001\001\000\020\024\300\061" +
    "\104\067\071\070\065\071\103\102\112\113\051\001\001" +
    "\000\020\024\305\061\104\067\071\070\065\071\103\102" +
    "\112\113\051\001\001\000\002\001\001\000\020\024\302" +
    "\061\104\067\071\070\065\071\103\102\112\113\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\142\055\317\061\104\067\071\070" +
    "\065\071\103\102\112\113\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\023\323\024\114\025\102\026" +
    "\070\027\057\032\061\035\047\036\063\037\111\056\056" +
    "\057\105\060\060\061\104\064\074\067\071\070\065\071" +
    "\103\102\112\113\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\023\123\024\114\025\102\026\070\027" +
    "\057\032\061\034\325\035\047\036\063\037\111\051\130" +
    "\053\126\054\124\056\056\057\105\060\060\061\104\064" +
    "\074\067\071\070\065\071\103\102\112\113\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\142\055\334\061\104\067\071\070\065\071\103\102" +
    "\112\113\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\023\340\024\114\025\102\026\070\027\057\032" +
    "\061\035\047\036\063\037\111\056\056\057\105\060\060" +
    "\061\104\064\074\067\071\070\065\071\103\102\112\113" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\022\342\023\067\024\114\025\102\026\070\027\057\032" +
    "\061\035\047\036\063\037\111\056\056\057\105\060\060" +
    "\061\104\064\074\067\071\070\065\071\103\102\112\113" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\363\001\001\000\002\001\001\000\006\020\357\021\356" +
    "\001\001\000\014\016\353\100\066\101\050\107\021\112" +
    "\024\001\001\000\004\103\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\067\361\070\065\071\103\102" +
    "\112\113\051\001\001\000\004\017\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\362\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\061\377\113\u0100\116\u0101\117\374\120\370\121\367\122" +
    "\371\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\073\u014d\074\147\077\156\001\001\000" +
    "\010\073\u014a\074\147\077\156\001\001\000\002\001\001" +
    "\000\012\113\u0100\117\u0149\121\367\122\371\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\062\226\066\225" +
    "\075\224\076\231\001\001\000\002\001\001\000\012\113" +
    "\u0100\117\u0146\121\367\122\371\001\001\000\002\001\001" +
    "\000\012\113\u0100\117\u010b\121\367\122\371\001\001\000" +
    "\012\113\u0100\117\u0104\121\367\122\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\067\213\070\065\071" +
    "\103\072\u0107\102\112\113\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\024\u011a\025\u0115\026\070\027\057" +
    "\032\061\035\047\036\u0112\037\111\043\u010f\044\u011b\046" +
    "\u010d\050\u0118\051\u0119\053\126\054\124\056\u0111\057\105" +
    "\060\060\061\104\064\u0113\067\071\070\065\071\103\102" +
    "\112\113\051\115\u0117\001\001\000\064\024\u011a\025\u0115" +
    "\026\070\027\057\032\061\035\047\036\u0112\037\111\043" +
    "\u0145\044\u011b\046\u010d\051\u0119\053\126\054\124\056\u0111" +
    "\057\105\060\060\061\104\064\u0113\067\071\070\065\071" +
    "\103\102\112\113\051\115\u0117\001\001\000\002\001\001" +
    "\000\004\050\u013a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\066\024\u011a" +
    "\025\u0115\026\070\027\057\032\061\035\047\036\u0112\037" +
    "\111\043\u012a\044\u011b\046\u010d\050\u012b\051\u0119\053\126" +
    "\054\124\056\u0111\057\105\060\060\061\104\064\u0113\067" +
    "\071\070\065\071\103\102\112\113\051\115\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\024\u011a\025" +
    "\u0115\026\070\027\057\032\061\035\047\036\u0112\037\111" +
    "\043\u0121\044\u011b\046\u010d\051\u0119\053\126\054\124\056" +
    "\u0111\057\105\060\060\061\104\064\u0113\067\071\070\065" +
    "\071\103\102\112\113\051\115\u0117\001\001\000\064\024" +
    "\u011a\025\u0115\026\070\027\057\032\061\035\047\036\u0112" +
    "\037\111\043\u011f\044\u011b\046\u010d\051\u0119\053\126\054" +
    "\124\056\u0111\057\105\060\060\061\104\064\u0113\067\071" +
    "\070\065\071\103\102\112\113\051\115\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\024\u011a\025\u0115\026\070\027\057\032\061\035" +
    "\047\036\u0112\037\111\040\u0125\046\u0124\051\u0119\053\126" +
    "\054\124\056\u0111\057\105\060\060\061\104\064\u0113\067" +
    "\071\070\065\071\103\102\112\113\051\115\u0127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\024\u011a\025\u0115\026\070\027\057\032\061\035\047" +
    "\036\u0112\037\111\040\u0128\051\u0119\053\126\054\124\056" +
    "\u0111\057\105\060\060\061\104\064\u0113\067\071\070\065" +
    "\071\103\102\112\113\051\115\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u012f\001\001\000\064" +
    "\024\u011a\025\u0115\026\070\027\057\032\061\035\047\036" +
    "\u0112\037\111\043\u012d\044\u011b\046\u010d\051\u0119\053\126" +
    "\054\124\056\u0111\057\105\060\060\061\104\064\u0113\067" +
    "\071\070\065\071\103\102\112\113\051\115\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\024\u011a\025\u0115\026" +
    "\070\027\057\032\061\035\047\036\u0112\037\111\040\u0136" +
    "\046\u0135\051\u0119\053\126\054\124\056\u0111\057\105\060" +
    "\060\061\104\064\u0113\067\071\070\065\071\103\102\112" +
    "\113\051\115\u0127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\024\u011a\025\u0115\026\070" +
    "\027\057\032\061\035\047\036\u0112\037\111\043\u013e\044" +
    "\u011b\046\u010d\050\u013f\051\u0119\053\126\054\124\056\u0111" +
    "\057\105\060\060\061\104\064\u0113\067\071\070\065\071" +
    "\103\102\112\113\051\115\u0117\001\001\000\002\001\001" +
    "\000\064\024\u011a\025\u0115\026\070\027\057\032\061\035" +
    "\047\036\u0112\037\111\043\u013c\044\u011b\046\u010d\051\u0119" +
    "\053\126\054\124\056\u0111\057\105\060\060\061\104\064" +
    "\u0113\067\071\070\065\071\103\102\112\113\051\115\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0143\001\001\000\064\024\u011a\025\u0115" +
    "\026\070\027\057\032\061\035\047\036\u0112\037\111\043" +
    "\u0141\044\u011b\046\u010d\051\u0119\053\126\054\124\056\u0111" +
    "\057\105\060\060\061\104\064\u0113\067\071\070\065\071" +
    "\103\102\112\113\051\115\u0117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\113" +
    "\u0100\121\u014b\122\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\061\377\113\u0100\116\u0150\117\374\120" +
    "\370\121\367\122\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\023\u015a\024\114\025\102\026\070\027\057\031" +
    "\u0159\032\061\035\047\036\063\037\111\056\056\057\105" +
    "\060\060\061\104\064\074\067\071\070\065\071\103\102" +
    "\112\113\051\001\001\000\002\001\001\000\052\022\u015b" +
    "\023\067\024\114\025\102\026\070\027\057\032\061\035" +
    "\047\036\063\037\111\056\056\057\105\060\060\061\104" +
    "\064\074\067\071\070\065\071\103\102\112\113\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\024\u0165\061\104\067\071\070\065\071\103\102\112\113" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\u0164\061\104\065\u0166\067\071\070\065\071\103\102" +
    "\112\113\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\u016d\001\001\000\002\001" +
    "\001\000\004\103\u016c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\111\u0170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0174\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\u0179\101\040\107\021\001\001\000\010\014\u0178" +
    "\101\040\107\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u018b\113" +
    "\u0187\001\001\000\006\007\u0184\010\u0180\001\001\000\002" +
    "\001\001\000\036\004\030\006\012\007\u017d\010\u0180\013" +
    "\u0181\100\006\101\016\104\u0183\105\u017c\106\020\107\021" +
    "\110\013\111\u017e\112\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\u0191\113\u0187\001\001\000\002" +
    "\001\001\000\014\067\u0190\070\065\071\103\102\112\113" +
    "\051\001\001\000\002\001\001\000\014\067\u018f\070\065" +
    "\071\103\102\112\113\051\001\001\000\014\067\u018e\070" +
    "\065\071\103\102\112\113\051\001\001\000\004\074\u018c" +
    "\001\001\000\006\011\u018d\113\u0187\001\001\000\004\074" +
    "\u018c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\u018c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\111\u01a2\001\001\000\006\007\u019b\010\u0180\001\001\000" +
    "\034\004\030\006\012\007\u017d\010\u0180\100\006\101\016" +
    "\104\u0183\105\u017c\106\020\107\021\110\013\111\u017e\112" +
    "\024\001\001\000\002\001\001\000\004\004\u019f\001\001" +
    "\000\002\001\001\000\004\004\u019e\001\001\000\006\007" +
    "\u017d\010\u0180\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\111\u01ac\001\001\000\010\007\u01a4\010\u0180\111" +
    "\u01a5\001\001\000\002\001\001\000\004\004\u01aa\001\001" +
    "\000\004\111\u01a7\001\001\000\002\001\001\000\004\004" +
    "\u01a8\001\001\000\002\001\001\000\004\111\u01a9\001\001" +
    "\000\002\001\001\000\004\111\u01ab\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\u01ae\014\041\101\040" +
    "\107\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\u01af\100\006\101\016\105\u01b4\107\021\110\013" +
    "\112\024\001\001\000\002\001\001\000\004\013\u0181\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\u01b7\014\041\101\040\107\021\001\001\000" +
    "\002\001\001\000\010\007\u01a4\010\u0180\111\u01a5\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    private Semantico semantico = Semantico.getInstance();
    private static ArrayList<Simbolo> tablaTemp = new ArrayList<Simbolo>();
    private static ArrayList<Integer> lineaTemp = new ArrayList<Integer>();
    String tipo = "";  //aun necesario
    String tipoB = ""; //no encuentro utilidad
    String valorV = "";
    Stack<String> valoresDecMul = new Stack<String>();
    Stack<String> pilaTipo = new Stack<String>();
    Stack<Registro_Semantico> pilaValor = new Stack<Registro_Semantico>();
    int cantParametros = 0;


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        //System.out.println("Error Sintactico Recuperado");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);

        //TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        //TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        resultado+= "\n\t Error Sintactico IRRECUPERABLE !";
        System.out.println("Error Sintactico IRRECUPERABLE !");
        resultado+= "\n\t\t\tLexema: "+lexema;
        System.out.println("\t\tLexema: "+lexema);
        resultado+= "\n\t\t\tLinea: "+fila;
        System.out.println("\t\tLinea: "+fila);
        //System.out.println("\t\tColumna: "+columna);

        //TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        //TablaES.add(datos);
    }


    //Metodo prueba para pasar cosas a otra clase
    
    private void crear_Global_ydel(String id, int linea){
    	
    	Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());
    	semantico.addSimbolo(nSim, linea);
        valorV = "";
        

        if (!pilaValor.isEmpty()){
            semantico.guardarId(id);
            Registro_Semantico temp;
            temp = pilaValor.pop();
            if(temp.getValor().equals("=")){
                semantico.agregar_a_pilaSemantica(temp);
                temp = pilaValor.pop();
                semantico.agregar_a_pilaSemantica(temp);
                while(!pilaValor.isEmpty()){
                    temp = pilaValor.pop();
                    if(!temp.getValor().equals("=")){
                        semantico.agregar_a_pilaSemantica(temp);
                    }
                    else{
                        pilaValor.push(temp);
                        break;
                    }
                }
            } 
        }
    }
    
    private void crear_Global(String id, int linea){
    	Simbolo nSim;
        String tipoTemp = pilaTipo.pop();
        pilaTipo.add(tipoTemp);
        pilaTipo.add(tipoTemp);
        
        nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());
       
    	semantico.addSimbolo(nSim, linea);
    	valorV = "";

        if (!pilaValor.isEmpty()){
            semantico.guardarId(id);
            Registro_Semantico temp;
            temp = pilaValor.pop();
            if(temp.getValor().equals("=")){
                semantico.agregar_a_pilaSemantica(temp);
                temp = pilaValor.pop();
                semantico.agregar_a_pilaSemantica(temp);
                while(!pilaValor.isEmpty()){
                    temp = pilaValor.pop();
                    if(!temp.getValor().equals("=")){
                        semantico.agregar_a_pilaSemantica(temp);
                    }
                    else{
                        pilaValor.push(temp);
                        break;
                    }
                }
            } 
        } 
    }

    private void crear_Funcion(String id, int linea){
    	Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Funcion, id, cantParametros);
		//System.out.println("F: " + nSim.getNombre() + "; T: " + pilaTipo.pop());
        cantParametros = 0;
    	semantico.addSimbolo(nSim, linea);
    	
    	tablaTemp = semantico.verificarLocales(tablaTemp, lineaTemp);
    	semantico.addTablaToSimbolo(tablaTemp);
    	tablaTemp.clear();
    	lineaTemp.clear();
    	pilaTipo.clear();
    }
    
    private void crear_Local_ydel(String id, int linea){
		Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());

        valorV = "";
    	tablaTemp.add(nSim);
    	lineaTemp.add(linea);
    }

    private void crear_Local(String id, int linea){
        String tipoTemp = pilaTipo.pop();
        pilaTipo.add(tipoTemp);
        pilaTipo.add(tipoTemp);
    	Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());
    	valorV = "";
    	tablaTemp.add(nSim);
    	lineaTemp.add(linea);
    }

    public static void print_tablaTemp(){
    	for(Simbolo s: tablaTemp){
            System.out.println(s.getId() +" " + s.getNombre() +" " + s.getTipo());
        }   
    }

    



    public void guardarOperador(String token){
        RS_Operador rso = new RS_Operador();
        rso.setValor(token);
        pilaValor.push(rso);
    }
    
    public void guardarId(String token){
        RS_DO rsdo = new RS_DO();
        rsdo.setTipo(RS_tipo.direccion);
        rsdo.setValor(token);
        pilaValor.push(rsdo);
    }
    
    public void guardarLiteral(String token){
        RS_DO rsdo = new RS_DO();
        rsdo.setTipo(RS_tipo.literal);
        rsdo.setValor(token);
        pilaValor.push(rsdo);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INI 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= FUNCS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI ::= PT GLOBAL 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INI ::= GLOBAL 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GLOBAL ::= GLOBAL_FACT GLOBAL 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GLOBAL ::= GLOBAL_FACT FUNCS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GLOBAL ::= error GLOBAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError al declarar una variable global. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GLOBAL ::= error FUNCS 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, falta punto y coma. Linea: " + (sright+1)  + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GLOBAL_FACT ::= INI_A PT 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GLOBAL_FACT ::= TIPO_GLOBAL Identificador DECLARS_BAS1 PT 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		crear_Global_ydel(id.toString(), (idright+1));               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GLOBAL_FACT ::= TIPO_GLOBAL Identificador PT 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		valoresDecMul.push("");	crear_Global_ydel(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GLOBAL_FACT ::= TIPO_GLOBAL Identificador DECLARS_BAS1 coma INI_A PT 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		crear_Global_ydel(id.toString(), (idright+1));   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GLOBAL_FACT ::= TIPO_GLOBAL Identificador coma INI_A PT 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		valoresDecMul.push("");	crear_Global_ydel(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GLOBAL_FACT ::= TIPO_GLOBAL PT 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GLOBAL_FACT ::= error PT 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError al declarar una variable global. Linea: " + (sright+1) + ". Recupera en:" + (zright + 1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GLOBAL_FACT ::= TIPO_GLOBAL error PT 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError al declarar una variable global. Linea: " + (sright+1)  + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GLOBAL_FACT",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PT ::= puntoycoma PT 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PT",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PT ::= puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PT",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCS ::= FUNCS_FACT PT FUNCS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCS ::= FUNCS_FACT FUNCS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCS ::= FUNCS_FACT PT 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCS ::= FUNCS_FACT 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCS_FACT ::= TIPO_GLOBAL Identificador para FUNCIONES 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		crear_Funcion(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS_FACT",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCS_FACT ::= Identificador para FUNCIONES 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		pilaTipo.push("void");    crear_Funcion(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS_FACT",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCS_FACT ::= rvoid Identificador para FUNCIONES 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		pilaTipo.push(t.toString()); crear_Funcion(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS_FACT",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCS_FACT ::= error FUNCIONES2 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError al definir una funcion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCS_FACT",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INI_A ::= Identificador DECLARS_BAS1 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		crear_Global(id.toString(), (idright+1)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_A",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INI_A ::= Identificador 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valoresDecMul.push("");	crear_Global(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_A",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INI_A ::= Identificador DECLARS_BAS1 coma INI_A 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		crear_Global(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_A",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INI_A ::= Identificador coma INI_A 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		valoresDecMul.push("");	crear_Global(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_A",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INI_A ::= error DECLARS_BAS1 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, se esperaba un identificador. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI_A",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_GLOBAL ::= NCONST 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_GLOBAL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_GLOBAL ::= TIPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_GLOBAL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARS_BAS1 ::= ASIG_EB DECLARS_BAS1 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARS_BAS1",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARS_BAS1 ::= ASIG_EB 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARS_BAS1",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIG_EB ::= igual EXP_BAS 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
			valoresDecMul.push(valorV); valorV = "";                                    guardarOperador("=");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG_EB",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_BAS ::= para EXP_BAS parc 
            {
              Symbol RESULT =null;
		valorV = "(" + valorV + ")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP_BAS ::= EXP_BAS ARIT1 EXP_BAS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP_BAS ::= menos EXP 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		valorV = v.toString() + valorV;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP_BAS ::= mas EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP_BAS ::= NOT_REP EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP_BAS ::= num 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = valorV + v.toString();                                                          guardarLiteral(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP_BAS ::= txt 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = valorV + v.toString();                                                          guardarLiteral(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_BAS",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCIONES ::= PARAMS2 parc FUNCIONES2 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCIONES ::= parc FUNCIONES2 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCIONES ::= error FUNCIONES2 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError al definir una funcion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCIONES2 ::= corcha CUERPO_FUNCION corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCIONES2 ::= corcha PT CUERPO_FUNCION corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCIONES2 ::= corcha CUERPO_FUNCION PT corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCIONES2 ::= corcha PT CUERPO_FUNCION PT corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCIONES2 ::= corcha error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError. La funcion debe tener cuerpo. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCIONES2 ::= error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError. Falta llave que abre. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES2",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMS2 ::= TIPO Identificador coma PARAMS2 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		cantParametros++;	valoresDecMul.push("");	crear_Local_ydel(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMS2 ::= TIPO Identificador 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		cantParametros++;	valoresDecMul.push("");	crear_Local_ydel(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMS2 ::= TIPO Identificador error PARAMS2 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, se esperaba ','. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMS2",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPO_FUNCION ::= DECLAR CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUERPO_FUNCION ::= CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUERPO_FUNCION ::= DECLAR 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError. La funcion debe tener cuerpo. Linea: " + (sright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_FUNCION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLAR ::= NCONST DECLAR1 DECLAR00 
            {
              Symbol RESULT =null;
		tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLAR ::= TIPO DECLAR1 DECLAR00 
            {
              Symbol RESULT =null;
		tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLAR ::= TIPO DECLAR00 
            {
              Symbol RESULT =null;
		tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLAR ::= NCONST DECLAR00 
            {
              Symbol RESULT =null;
		tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLAR ::= NCONST error DECLAR00 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la declaracion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLAR ::= TIPO error DECLAR00 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Symbol z = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la declaracion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLAR00 ::= puntoycoma DECLAR 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR00",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLAR00 ::= puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR00",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLAR1 ::= Identificador 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valoresDecMul.push("");	valorV = "";	crear_Local(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLAR1 ::= Identificador DECLAR2 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		crear_Local(id.toString(), (idright+1));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLAR2 ::= igual EXP DECLAR3 
            {
              Symbol RESULT =null;
		valoresDecMul.push(valorV);	System.out.println(valorV);                               guardarOperador("=");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLAR2 ::= DECLAR3 
            {
              Symbol RESULT =null;
		valoresDecMul.push(""); valorV = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLAR2 ::= igual EXP 
            {
              Symbol RESULT =null;
		valoresDecMul.push(valorV);	valorV = "";	System.out.println(valorV);                       guardarOperador("=");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR2",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLAR3 ::= coma DECLAR1 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLAR3",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CUERPO ::= OPS_CUERPO CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CUERPO ::= OPS_CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPS_CUERPO ::= EXPRESION puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPS_CUERPO ::= DO_WHILE puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPS_CUERPO ::= EST_CONTROL 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPS_CUERPO ::= INSTRUCCIONES puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPS_CUERPO ::= RETORNO puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPS_CUERPO ::= error puntoycoma 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en una expresion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= ASIGNACION 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EST_CONTROL ::= NIF 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EST_CONTROL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EST_CONTROL ::= NFOR 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EST_CONTROL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EST_CONTROL ::= NWHILE 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EST_CONTROL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EST_CONTROL ::= NSWITCH 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EST_CONTROL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NIF ::= IF_ESTRUC NELSE 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NIF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NIF ::= IF_ESTRUC 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NIF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IF_ESTRUC ::= rif para COND_EXPS OPS_CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_ESTRUC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IF_ESTRUC ::= rif para COND_EXPS corcha CUERPO corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_ESTRUC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IF_ESTRUC ::= rif para COND_EXPS corcha corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_ESTRUC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IF_ESTRUC ::= rif para error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la estructura de control 'if'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_ESTRUC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IF_ESTRUC ::= rif error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la estructura de control 'if'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF_ESTRUC",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NELSE ::= relse ELSE_ESTRUC 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NELSE",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELSE_ESTRUC ::= OPS_CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_ESTRUC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELSE_ESTRUC ::= corcha CUERPO corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE_ESTRUC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NFOR ::= rfor FOR_ESTRUC OPS_CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NFOR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NFOR ::= rfor FOR_ESTRUC corcha CUERPO_CICLO corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NFOR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NFOR ::= rfor FOR_ESTRUC corcha corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NFOR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NFOR ::= rfor error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la estructura de control 'for'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NFOR",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FOR_ESTRUC ::= para FOR_EXPR puntoycoma EXPRESION puntoycoma EXPRESION parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FOR_ESTRUC ::= para FOR_EXPR puntoycoma puntoycoma parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FOR_ESTRUC ::= para FOR_EXPR puntoycoma EXPRESION puntoycoma parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FOR_ESTRUC ::= para FOR_EXPR puntoycoma puntoycoma EXPRESION parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FOR_ESTRUC ::= para puntoycoma EXPRESION puntoycoma EXPRESION parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR_ESTRUC ::= para puntoycoma EXPRESION puntoycoma parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FOR_ESTRUC ::= para puntoycoma puntoycoma EXPRESION parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR_ESTRUC ::= para puntoycoma puntoycoma parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FOR_ESTRUC ::= para error corcha 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en parametros la estructura de control 'for'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_ESTRUC",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FOR_EXPR ::= EXPRESION 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_EXPR",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // FOR_EXPR ::= TIPO Identificador igual EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_EXPR",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPO_CICLO ::= OPS_CUERPO CUERPO_CICLO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPO_CICLO ::= CONT_BREAK_OP puntoycoma CUERPO_CICLO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPO_CICLO ::= OPS_CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPO_CICLO ::= CONT_BREAK_OP puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_CICLO",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NWHILE ::= rwhile para COND_EXPS OPS_CUERPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NWHILE ::= rwhile para COND_EXPS corcha CUERPO_CICLO corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NWHILE ::= rwhile para COND_EXPS corcha corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NWHILE ::= rwhile para error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en parametros de la estructura de control 'while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NWHILE ::= rwhile error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en parametros de la estructura de control 'while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NWHILE",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DO_WHILE ::= rdo corcha CUERPO_CICLO corchc rwhile para COND_EXPS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DO_WHILE ::= rdo corcha corchc rwhile para COND_EXPS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DO_WHILE ::= rdo corcha error corchc rwhile para COND_EXPS 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		resultado+= "\n\tError en la estructura de control 'do-while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NSWITCH ::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NSWITCH ::= rswitch para COND_EXPS_SW corcha DEFAULT_CLAU CASE_ESTRUC corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NSWITCH ::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC DEFAULT_CLAU corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NSWITCH ::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC DEFAULT_CLAU CASE_ESTRUC corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NSWITCH ::= rswitch para COND_EXPS_SW corcha DEFAULT_CLAU corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NSWITCH ::= rswitch para COND_EXPS_SW corcha corchc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NSWITCH ::= rswitch error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NSWITCH ::= rswitch para error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NSWITCH ::= rswitch para COND_EXPS_SW corcha error corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NSWITCH ::= rswitch para COND_EXPS_SW corcha error DEFAULT_CLAU corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NSWITCH ::= rswitch para COND_EXPS_SW corcha error DEFAULT_CLAU CASE_ESTRUC corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NSWITCH ::= rswitch para COND_EXPS_SW corcha error CASE_ESTRUC DEFAULT_CLAU corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NSWITCH ::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC error CASE_ESTRUC DEFAULT_CLAU corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NSWITCH ::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC error DEFAULT_CLAU corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NSWITCH ::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC error DEFAULT_CLAU CASE_ESTRUC corchc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NSWITCH",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COND_EXPS_SW ::= EXPRESION_SW OPERS COND_EXPS_SW parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_EXPS_SW",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // COND_EXPS_SW ::= EXPRESION_SW parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_EXPS_SW",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // COND_EXPS_SW ::= error parc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError. Los parametros del switch deben ser numericos. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_EXPS_SW",76, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION_SW ::= ASIGNACION 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_SW",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION_SW ::= EXP_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_SW",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP_SW ::= Identificador para VALS parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SW",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXP_SW ::= Identificador para parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SW",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXP_SW ::= EXP_COM_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_SW",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXP_COM_SW ::= EXP_COM2_SW OPERS EXP_COM_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM_SW",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXP_COM_SW ::= menos EXP_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM_SW",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXP_COM_SW ::= mas EXP_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM_SW",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXP_COM_SW ::= NOT_REP EXP_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM_SW",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXP_COM_SW ::= EXP_COM2_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM_SW",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXP_COM2_SW ::= para EXP_SW parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM2_SW",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXP_COM2_SW ::= num 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM2_SW",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP_COM2_SW ::= Identificador 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM2_SW",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CASE_ESTRUC ::= OPS_CUERPO_SW CASE_ESTRUC 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_ESTRUC",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CASE_ESTRUC ::= CASE_ESTRUC2 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_ESTRUC",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CASE_ESTRUC ::= OPS_CUERPO_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_ESTRUC",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CUERPO_SW ::= OPS_CUERPO_SW CUERPO_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_SW",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CUERPO_SW ::= OPS_CUERPO_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_SW",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OPS_CUERPO_SW ::= EXPRESION puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO_SW",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OPS_CUERPO_SW ::= DO_WHILE puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO_SW",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OPS_CUERPO_SW ::= EST_CONTROL 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO_SW",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OPS_CUERPO_SW ::= INSTRUCCIONES puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO_SW",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OPS_CUERPO_SW ::= CONT_BREAK_OP puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO_SW",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OPS_CUERPO_SW ::= RETORNO puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPS_CUERPO_SW",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CASE_ESTRUC2 ::= CASE_CLAU CASE_ESTRUC 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_ESTRUC2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CASE_ESTRUC2 ::= CASE_CLAU 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_ESTRUC2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CASE_CUERPO_INT ::= OPS_CUERPO_SW CASE_CUERPO_INT 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_CUERPO_INT",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CASE_CUERPO_INT ::= OPS_CUERPO_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_CUERPO_INT",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CASE_CLAU ::= rcase num dospuntos CUERPO_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_CLAU",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CASE_CLAU ::= rcase num dospuntos CASE_CLAU 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_CLAU",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CASE_CLAU ::= rcase num dospuntos puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASE_CLAU",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // DEFAULT_CLAU ::= rdefault dospuntos CUERPO_SW 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT_CLAU",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // DEFAULT_CLAU ::= rdefault dospuntos CASE_CLAU 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT_CLAU",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DEFAULT_CLAU ::= rdefault dospuntos puntoycoma 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFAULT_CLAU",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONT_BREAK_OP ::= NCONTINUE 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_BREAK_OP",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONT_BREAK_OP ::= BREAK 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONT_BREAK_OP",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // BREAK ::= rbreak 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BREAK",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NCONTINUE ::= rcontinue 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NCONTINUE",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // COND_EXPS ::= EXPRESION OPERS COND_EXPS parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_EXPS",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // COND_EXPS ::= EXPRESION parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_EXPS",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // COND_EXPS ::= error parc 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		resultado+= "\n\tError en los parametros de la extructura de control. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND_EXPS",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // INSTRUCCIONES ::= READ 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // INSTRUCCIONES ::= WRITE 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // READ ::= rread para parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // READ ::= rread para Identificador parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // WRITE ::= rwrite para EXP parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // WRITE ::= rwrite para Identificador ARIT_ASIG2 parc 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ASIGNACION ::= Identificador ASIGNACION1 ASIGNACION2 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ASIGNACION ::= Identificador ASIGNACION1 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ASIGNACION1 ::= EXP_ASIG 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ASIGNACION1 ::= ARIT_ASIG2 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION1",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ASIGNACION2 ::= coma ASIGNACION 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION2",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // RETORNO ::= rreturn RETORNO1 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // RETORNO ::= rreturn 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // RETORNO1 ::= EXPRESION 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO1",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // RETORNO1 ::= coma EXPRESION RETORNO1 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO1",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // EXP_ASIG ::= ARIT_ASIG EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // EXP ::= Identificador para VALS parc 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		valorV = i.toString() + "(" + valorV + ")";        guardarId(i.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // EXP ::= Identificador para parc 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		valorV = i.toString() + "()";                          guardarId(i.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // EXP ::= EXP_COM 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // EXP_COM ::= EXP_COM2 OPERS EXP_COM 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // EXP_COM ::= menos EXP 
            {
              Symbol RESULT =null;
		valorV = "-" + valorV;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // EXP_COM ::= mas EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // EXP_COM ::= NOT_REP EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // EXP_COM ::= EXP_COM2 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // NOT_REP ::= not NOT_REP 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		valorV = v.toString() + valorV;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOT_REP",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NOT_REP ::= not 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = v.toString() + valorV;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOT_REP",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // EXP_COM2 ::= para EXP parc 
            {
              Symbol RESULT =null;
		valorV = "(" + valorV + ")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM2",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // EXP_COM2 ::= TERM 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP_COM2",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // VALS ::= EXP coma VALS 
            {
              Symbol RESULT =null;
		valorV = "," + valorV;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // VALS ::= EXP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALS",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // OPERS ::= ARIT1 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERS",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // OPERS ::= BOOLS 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERS",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // ARIT1 ::= mas 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();                 guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT1",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // ARIT1 ::= menos 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();               guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT1",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // ARIT1 ::= por 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();                 guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT1",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ARIT1 ::= div 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();                 guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT1",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ARIT1 ::= mod 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();                 guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT1",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ARIT_ASIG ::= igual 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ARIT_ASIG ::= masigual 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // ARIT_ASIG ::= menosigual 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ARIT_ASIG ::= porigual 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ARIT_ASIG ::= divigual 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ARIT_ASIG2 ::= masmas 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();                 guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG2",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ARIT_ASIG2 ::= menosmenos 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV+= v.toString();                 guardarOperador(v.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARIT_ASIG2",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // BOOLS ::= igualigual 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = i.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // BOOLS ::= mayque 
            {
              Symbol RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = m.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // BOOLS ::= may 
            {
              Symbol RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = m.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // BOOLS ::= menque 
            {
              Symbol RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = m.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // BOOLS ::= men 
            {
              Symbol RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = m.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // BOOLS ::= dif 
            {
              Symbol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = d.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // BOOLS ::= or 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = o.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // BOOLS ::= and 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = a.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOOLS",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NCONST ::= CONST_REP TIPO 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NCONST",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NCONST ::= TIPO CONST_REP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NCONST",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NCONST ::= CONST_REP 
            {
              Symbol RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NCONST",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CONST_REP ::= rconst CONST_REP 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		tipo+= t.toString()+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONST_REP",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CONST_REP ::= rconst 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString()+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONST_REP",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TIPO ::= rint 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString(); pilaTipo.push(tipo); tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TIPO ::= rchar 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString();pilaTipo.push(tipo);tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TIPO ::= rlong 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString();pilaTipo.push(tipo);tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TIPO ::= TIPO_MODI rint 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString();pilaTipo.push(tipo);tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TIPO ::= rlong rlong 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tt = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString() +" "+ tt.toString();pilaTipo.push(tipo);tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TIPO ::= rshort 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString();pilaTipo.push(tipo);tipo = "";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TIPO_MODI ::= rlong 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString()+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_MODI",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TIPO_MODI ::= rlong rlong 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tt = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString() +" "+ tt.toString()+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_MODI",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TIPO_MODI ::= rshort 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		tipo+= t.toString()+" ";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_MODI",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TERM ::= num 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = n.toString();             guardarLiteral(n.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERM",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TERM ::= txt 
            {
              Symbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = t.toString();             guardarLiteral(t.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERM",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TERM ::= Identificador 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		valorV = i.toString();   guardarLiteral(i.toString());
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERM",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
