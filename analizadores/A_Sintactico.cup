/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes

package analizador_Sintactico;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import analizador_Semantico.Semantico;
import analizador_Semantico.Simbolo;
import analizador_Semantico.Identificador;
import java.util.Stack;
import java.util.ArrayList;

//------> Codigo para el parser,variables, metodos
parser code
{:
    public String resultado="";
    private Semantico semantico = Semantico.getInstance();
    private static ArrayList<Simbolo> tablaTemp = new ArrayList<Simbolo>();
    private static ArrayList<Integer> lineaTemp = new ArrayList<Integer>();
    String tipo = "";  //aun necesario
    String tipoB = ""; //no encuentro utilidad
    String valorV = "";
    Stack<String> valoresDecMul = new Stack<String>();
    Stack<String> pilaTipo = new Stack<String>();
    int cantParametros = 0;


    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        //System.out.println("Error Sintactico Recuperado");
        //System.out.println("\t\tLexema: "+lexema);
        //System.out.println("\t\tFila: "+fila);
        //System.out.println("\t\tColumna: "+columna);

        //TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        //TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        resultado+= "\n\t Error Sintactico IRRECUPERABLE !";
        System.out.println("Error Sintactico IRRECUPERABLE !");
        resultado+= "\n\t\t\tLexema: "+lexema;
        System.out.println("\t\tLexema: "+lexema);
        resultado+= "\n\t\t\tLinea: "+fila;
        System.out.println("\t\tLinea: "+fila);
        //System.out.println("\t\tColumna: "+columna);

        //TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        //TablaES.add(datos);
    }


    //Metodo prueba para pasar cosas a otra clase
    
    private void crear_Global_ydel(String id, int linea){
    	
    	Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());
    	semantico.addSimbolo(nSim, linea);
        valorV = "";
    }
    
    private void crear_Global(String id, int linea){
    	Simbolo nSim;
        String tipoTemp = pilaTipo.pop();
        pilaTipo.push(tipoTemp);
        pilaTipo.push(tipoTemp);
        
        nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());
        
    	semantico.addSimbolo(nSim, linea);
    	valorV = "";
    }

    private void crear_Funcion(String id, int linea){
    	Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Funcion, id, cantParametros);
		//System.out.println("F: " + nSim.getNombre() + "; T: " + pilaTipo.pop());
        cantParametros = 0;
    	semantico.addSimbolo(nSim, linea);
    	
    	tablaTemp = semantico.verificarLocales(tablaTemp, lineaTemp);
    	semantico.addTablaToSimbolo(tablaTemp);
    	tablaTemp.clear();
    	lineaTemp.clear();
    	pilaTipo.clear();
    }
    
    private void crear_Local_ydel(String id, int linea){
		Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());

        valorV = "";
    	tablaTemp.add(nSim);
    	lineaTemp.add(linea);
    }

    private void crear_Local(String id, int linea){
        String tipoTemp = pilaTipo.pop();
        pilaTipo.push(tipoTemp);
        pilaTipo.push(tipoTemp);
    	Simbolo nSim = new Simbolo(pilaTipo.pop(), Identificador.Variable, id, valoresDecMul.pop());
    	valorV = "";
    	tablaTemp.add(nSim);
    	lineaTemp.add(linea);
    }

    public static void print_tablaTemp(){
    	for(Simbolo s: tablaTemp){
            System.out.println(s.getId() +" " + s.getNombre() +" " + s.getTipo());
        }   
    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 

terminal Operador, Palabra_reservada, num, txt, Identificador,masmas,menosmenos;
terminal igual,mas,menos,por,div,mod,para,parc,masigual,menosigual,porigual;
terminal divigual,igualigual,mayque,may,menque,men,dif,or,and,not;
terminal rbreak, rcase, rchar, rconst, rcontinue, rdefault, rdo, relse, rfor;
terminal rif, rint, rlong, rreturn, rshort, rswitch, rvoid, rwhile;
terminal coma, puntoycoma, punto, dospuntos, corcha, corchc, rread, rwrite, eof;

//------>terminales no sados
// relse, Operador, Palabra_reservada, punto, rdo
//------> declaracion de no terminales
non terminal Symbol INICIO, INI, INI_A, INI2, TIPO_GLOBAL, DECLARS_BAS1;
non terminal Symbol ASIG_EB, EXP_BAS, FUNCIONES, FUNCIONES2, PARAMS2, CUERPO_FUNCION;
non terminal Symbol DECLAR, DECLAR1, DECLAR2, DECLAR3, CUERPO, OPS_CUERPO, EXPRESION;
non terminal Symbol EST_CONTROL, NIF, IF_ESTRUC, NELSE, ELSE_ESTRUC, NFOR, FOR_ESTRUC;
non terminal Symbol CUERPO_CICLO, NWHILE, DO_WHILE, NSWITCH, CUERPO_SW;
non terminal Symbol NCASE, CUERPO_OP, CASE_ESTRUC, CASE_ESTRUC2, CASE_CUERPO_INT;
non terminal Symbol CASE_CLAU, DEFAULT_ESTRUC, DEFAULT_CLAU, CONT_BREAK_OP;
non terminal Symbol BREAK_OP, BREAK, NCONTINUE, COND_EXPS, INSTRUCCIONES, READ, WRITE, ASIGNACION;
non terminal Symbol ASIGNACION1, ASIGNACION2, RETORNO, RETORNO1, EXP_ASIG, EXP;
non terminal Symbol EXP_COM, EXP_COM2, VALS, OPERS, ARIT1, ARIT_ASIG, ARIT_ASIG2;
non terminal Symbol BOOLS, NCONST, TIPO, TERM, DECLAR00, GLOBAL, FUNCS, GLOBAL_FACT;
non terminal Symbol TIPO_MODI, FUNCS_FACT, PT, CONST_REP, NOT_REP, WHILE_DO, OPS_CUERPO_SW;
non terminal Symbol COND_EXPS_SW, EXP_SW, EXPRESION_SW, EXP_COM_SW, EXP_COM2_SW, FOR_EXPR;


//non terminal String ERROR;




//----> precedencia de menor a mayor 
/*
precedence left puntoycoma;
precedence left coma;
*/
precedence left  num,txt,Identificador;
precedence left masmas,menosmenos,igual,masigual,menosigual,porigual, divigual;
precedence left igualigual,mayque,may,menque,men,dif,or,and,not;
precedence left mas, menos;
precedence left por, div,mod;
precedence left rbreak, rcase, rchar, rconst, rcontinue, rdefault, rdo, relse, rfor, rif, rint, rlong, rreturn, rshort, rswitch, rvoid, rwhile, rwrite, rread;
precedence left para;
precedence left corcha;
precedence left corchc;
precedence left parc;


start with INICIO;

/*--------------- 3ra Area: Reglas-----------------------*/
INICIO::= INI
	  |FUNCS;

INI::= PT GLOBAL
      |GLOBAL;
      
GLOBAL::=  GLOBAL_FACT GLOBAL
          |GLOBAL_FACT FUNCS
          |error:s GLOBAL:z {:resultado+= "\n\tError al declarar una variable global. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}//{:System.out.println("\tError al declarar una variable global. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
          |error:s FUNCS:z {:resultado+= "\n\tError, falta punto y coma. Linea: " + (sright+1)  + ". Recuperado en: " + (zright+1);:};//{:System.out.println("\tError, falta punto y coma. Linea: " + (sright+1)  + ". Recuperado en: " + (zright+1));:};
          
GLOBAL_FACT::= INI_A PT
	       	  |TIPO_GLOBAL Identificador:id DECLARS_BAS1 PT {:crear_Global_ydel(id.toString(), (idright+1));:}
	          |TIPO_GLOBAL Identificador:id PT {:valoresDecMul.push("");	crear_Global_ydel(id.toString(), (idright+1));:}
	          |TIPO_GLOBAL Identificador:id DECLARS_BAS1 coma INI_A PT {:crear_Global_ydel(id.toString(), (idright+1));:}
	          |TIPO_GLOBAL Identificador:id coma INI_A PT {:valoresDecMul.push("");	crear_Global_ydel(id.toString(), (idright+1));:}
              |TIPO_GLOBAL PT
              |error:s PT:z {:resultado+= "\n\tError al declarar una variable global. Linea: " + (sright+1) + ". Recupera en:" + (zright + 1);:}	//{:System.out.println("\tError al declarar una variable global. Linea: " + (sright+1) + ". Recupera en:" + (zright + 1));:}
              |TIPO_GLOBAL error:s PT:z {:resultado+= "\n\tError al declarar una variable global. Linea: " + (sright+1)  + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError al declarar una variable global. Linea: " + (sright+1)  + ". Recuperado en: " + (zright+1));:};

PT::= puntoycoma PT
     |puntoycoma;

FUNCS::= FUNCS_FACT PT FUNCS
         |FUNCS_FACT FUNCS
         |FUNCS_FACT PT
         |FUNCS_FACT;
         
FUNCS_FACT::= TIPO_GLOBAL Identificador:id para FUNCIONES {:crear_Funcion(id.toString(), (idright+1));:}
              |Identificador:id para FUNCIONES  {:pilaTipo.push("void");    crear_Funcion(id.toString(), (idright+1));:}
              |rvoid:t Identificador:id para FUNCIONES {:pilaTipo.push(t.toString()); crear_Funcion(id.toString(), (idright+1));:}
              |error:s FUNCIONES2:z {:resultado+= "\n\tError al definir una funcion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError al definir una funcion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};
              
   
INI_A::= Identificador:id DECLARS_BAS1  {:crear_Global(id.toString(), (idright+1));:}
         |Identificador:id   {:valoresDecMul.push("");	crear_Global(id.toString(), (idright+1));:}
         |Identificador:id DECLARS_BAS1 coma INI_A {:crear_Global(id.toString(), (idright+1));:}
         |Identificador:id coma INI_A  {:valoresDecMul.push("");	crear_Global(id.toString(), (idright+1));:}
         |error:s DECLARS_BAS1:z {:resultado+= "\n\tError, se esperaba un identificador. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError, se esperaba un identificador. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

TIPO_GLOBAL::= NCONST
              |TIPO;

DECLARS_BAS1::= ASIG_EB DECLARS_BAS1
               |ASIG_EB;

ASIG_EB::= igual EXP_BAS {:	valoresDecMul.push(valorV); valorV = "";:};

EXP_BAS::= para EXP_BAS parc {:valorV = "(" + valorV + ")";:}
           |EXP_BAS ARIT1 EXP_BAS
           |menos:v EXP {:valorV = v.toString() + valorV;:}
           |mas EXP //Aqui se deja igual porque un mas (+) no cambia el valor
           |NOT_REP EXP
           |num:v {:valorV = valorV + v.toString();:}
           |txt:v {:valorV = valorV + v.toString();:};

FUNCIONES::= PARAMS2 parc FUNCIONES2
			|parc FUNCIONES2
			|error:s FUNCIONES2:z {:resultado+= "\n\tError al definir una funcion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError al definir una funcion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

FUNCIONES2::= corcha CUERPO_FUNCION corchc
             |corcha PT CUERPO_FUNCION corchc
             |corcha CUERPO_FUNCION PT corchc
             |corcha PT CUERPO_FUNCION PT corchc
             |corcha error:s corchc:z {:resultado+= "\n\tError. La funcion debe tener cuerpo. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError. La funcion debe tener cuerpo. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
             |error:s corchc:z {:resultado+= "\n\tError. Falta llave que abre. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError. Falta llave que abre. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

PARAMS2::= TIPO Identificador:id coma PARAMS2 {:cantParametros++;	valoresDecMul.push("");	crear_Local_ydel(id.toString(), (idright+1));:}
          |TIPO Identificador:id {:cantParametros++;	valoresDecMul.push("");	crear_Local_ydel(id.toString(), (idright+1));:}
          |TIPO Identificador error:s PARAMS2:z {:resultado+= "\n\tError, se esperaba ','. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError, se esperaba ','. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

CUERPO_FUNCION::= DECLAR CUERPO
                  |CUERPO
                  |DECLAR:s {:resultado+= "\n\tError. La funcion debe tener cuerpo. Linea: " + (sright+1);:};	//{:System.out.println("\tError. La funcion debe tener cuerpo. Linea: " + (sright+1));:};

DECLAR::= NCONST DECLAR1 DECLAR00 {:tipo = "";:}
         |TIPO DECLAR1  DECLAR00 {:tipo = "";:}
         |TIPO DECLAR00 {:tipo = "";:}
         |NCONST DECLAR00 {:tipo = "";:}
         |NCONST error:s DECLAR00:z {:resultado+= "\n\tError en la declaracion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError en la declaracion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
         |TIPO error:s DECLAR00:z {:resultado+= "\n\tError en la declaracion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en la declaracion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

DECLAR00::= puntoycoma DECLAR
           |puntoycoma;

DECLAR1::= Identificador:id {:valoresDecMul.push("");	valorV = "";	crear_Local(id.toString(), (idright+1));:}
          |Identificador:id DECLAR2 {:crear_Local(id.toString(), (idright+1));:};

DECLAR2::= igual EXP DECLAR3 {:valoresDecMul.push(valorV);	System.out.println(valorV);:}
          |DECLAR3
          |igual EXP {:valoresDecMul.push(valorV);	valorV = "";	System.out.println(valorV);:};

DECLAR3::= coma DECLAR1;

CUERPO::= OPS_CUERPO CUERPO
         |OPS_CUERPO;

OPS_CUERPO::= EXPRESION puntoycoma
             |DO_WHILE puntoycoma
             |EST_CONTROL
             |INSTRUCCIONES puntoycoma
             |RETORNO puntoycoma
             |error:s puntoycoma:z {:resultado+= "\n\tError en una expresion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en una expresion. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

EXPRESION::= ASIGNACION
            |EXP;

EST_CONTROL::= NIF
              |NFOR
              |NWHILE
              |NSWITCH;

NIF::= IF_ESTRUC NELSE
	  |IF_ESTRUC;

IF_ESTRUC::= rif para COND_EXPS OPS_CUERPO
            |rif para COND_EXPS corcha CUERPO corchc
            |rif para COND_EXPS corcha corchc
            |rif para error:s corchc:z {:resultado+= "\n\tError en la estructura de control 'if'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError en la estructura de control 'if'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
            |rif error:s corchc:z {:resultado+= "\n\tError en la estructura de control 'if'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en la estructura de control 'if'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};
            
NELSE::= relse ELSE_ESTRUC;

ELSE_ESTRUC::= OPS_CUERPO
	      |corcha CUERPO corchc;

NFOR::= rfor  FOR_ESTRUC  OPS_CUERPO
       |rfor  FOR_ESTRUC  corcha CUERPO_CICLO corchc
       |rfor  FOR_ESTRUC  corcha corchc
       |rfor error:s corchc:z {:resultado+= "\n\tError en la estructura de control 'for'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en la estructura de control 'for'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

FOR_ESTRUC::= para FOR_EXPR puntoycoma EXPRESION puntoycoma EXPRESION parc
			 |para FOR_EXPR puntoycoma puntoycoma parc
			 |para FOR_EXPR puntoycoma EXPRESION puntoycoma parc
			 |para FOR_EXPR puntoycoma puntoycoma EXPRESION parc
			 |para puntoycoma EXPRESION puntoycoma EXPRESION parc
			 |para puntoycoma EXPRESION puntoycoma parc
			 |para puntoycoma puntoycoma EXPRESION parc
			 |para puntoycoma puntoycoma parc
			 |para error:s corcha:z {:resultado+= "\n\tError en parametros la estructura de control 'for'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en parametros la estructura de control 'for'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

FOR_EXPR::= EXPRESION
           |TIPO Identificador igual EXP;

CUERPO_CICLO::= OPS_CUERPO CUERPO_CICLO
               |CONT_BREAK_OP puntoycoma CUERPO_CICLO
		       |OPS_CUERPO
		       |CONT_BREAK_OP puntoycoma;

NWHILE::= rwhile para COND_EXPS  OPS_CUERPO
         |rwhile para COND_EXPS  corcha CUERPO_CICLO corchc
         |rwhile para COND_EXPS  corcha corchc
         |rwhile para error:s corchc:z {:resultado+= "\n\tError en parametros de la estructura de control 'while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError en parametros de la estructura de control 'while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
         |rwhile error:s corchc:z {:resultado+= "\n\tError en parametros de la estructura de control 'while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en parametros de la estructura de control 'while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

DO_WHILE::= rdo corcha CUERPO_CICLO corchc rwhile para COND_EXPS
            |rdo corcha corchc rwhile para COND_EXPS
            |rdo corcha error:s corchc:z rwhile para COND_EXPS {:resultado+= "\n\tError en la estructura de control 'do-while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en la estructura de control 'do-while'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};


NSWITCH::= rswitch para COND_EXPS_SW corcha CASE_ESTRUC corchc
           |rswitch para COND_EXPS_SW corcha DEFAULT_CLAU CASE_ESTRUC corchc
           |rswitch para COND_EXPS_SW corcha CASE_ESTRUC DEFAULT_CLAU corchc
           |rswitch para COND_EXPS_SW corcha CASE_ESTRUC DEFAULT_CLAU CASE_ESTRUC corchc
           |rswitch para COND_EXPS_SW corcha DEFAULT_CLAU corchc
           |rswitch para COND_EXPS_SW corcha corchc
           |rswitch error:s corchc:z {:resultado+= "\n\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para error:s corchc:z {:resultado+= "\n\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha error:s corchc:z {:resultado+= "\n\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError en la estructura de control 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha error DEFAULT_CLAU:s corchc:z {:resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha error DEFAULT_CLAU:s CASE_ESTRUC corchc:z {:resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha error CASE_ESTRUC DEFAULT_CLAU:s corchc:z {:resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha CASE_ESTRUC error CASE_ESTRUC DEFAULT_CLAU:s corchc:z {:resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha CASE_ESTRUC error DEFAULT_CLAU:s corchc:z {:resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:}	//{:System.out.println("\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:}
           |rswitch para COND_EXPS_SW corcha CASE_ESTRUC error DEFAULT_CLAU:s CASE_ESTRUC corchc:z {:resultado+= "\n\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError, multiples etiqueta 'default' en la estructura 'switch'. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

COND_EXPS_SW::= EXPRESION_SW OPERS COND_EXPS_SW parc
            |EXPRESION_SW parc
            |error:s parc:z {:resultado+= "\n\tError. Los parametros del switch deben ser numericos. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError. Los parametros del switch deben ser numericos. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

EXPRESION_SW::= ASIGNACION
            |EXP_SW;
            
EXP_SW::= Identificador para VALS parc
       |Identificador para parc
       |EXP_COM_SW;

EXP_COM_SW::= EXP_COM2_SW OPERS EXP_COM_SW//TERM OPERS EXP_COM
          |menos EXP_SW
          |mas EXP_SW
          |NOT_REP EXP_SW
          |EXP_COM2_SW;

EXP_COM2_SW::= para EXP_SW parc
		   |num
		   |Identificador;

CASE_ESTRUC::= OPS_CUERPO_SW CASE_ESTRUC
              |CASE_ESTRUC2
              |OPS_CUERPO_SW;

CUERPO_SW::= OPS_CUERPO_SW CUERPO_SW
            |OPS_CUERPO_SW;
            
OPS_CUERPO_SW::= EXPRESION puntoycoma
                |DO_WHILE puntoycoma
                |EST_CONTROL
                |INSTRUCCIONES puntoycoma
                |CONT_BREAK_OP puntoycoma
                |RETORNO puntoycoma;
             
CASE_ESTRUC2::= CASE_CLAU CASE_ESTRUC
               |CASE_CLAU;
      
CASE_CUERPO_INT::= OPS_CUERPO_SW CASE_CUERPO_INT
                  |OPS_CUERPO_SW;

CASE_CLAU::= rcase num dospuntos CUERPO_SW
            |rcase num dospuntos CASE_CLAU
            |rcase num dospuntos puntoycoma;

DEFAULT_CLAU::= rdefault dospuntos CUERPO_SW
               |rdefault dospuntos CASE_CLAU
               |rdefault dospuntos puntoycoma;

CONT_BREAK_OP::= NCONTINUE
                |BREAK;

BREAK::= rbreak;

NCONTINUE::= rcontinue;

COND_EXPS::= EXPRESION OPERS COND_EXPS parc
            |EXPRESION parc
            |error:s parc:z {:resultado+= "\n\tError en los parametros de la extructura de control. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1);:};	//{:System.out.println("\tError en los parametros de la extructura de control. Linea: " + (sright+1) + ". Recuperado en: " + (zright+1));:};

INSTRUCCIONES::= READ
                |WRITE;

READ::= rread para parc
       |rread para Identificador parc;

WRITE::= rwrite para EXP parc
		|rwrite para Identificador ARIT_ASIG2 parc;

ASIGNACION::= Identificador ASIGNACION1 ASIGNACION2
			 |Identificador ASIGNACION1;

ASIGNACION1::= EXP_ASIG
           	  |ARIT_ASIG2;

ASIGNACION2::= coma ASIGNACION;

RETORNO::= rreturn RETORNO1
		  |rreturn;

RETORNO1::= EXPRESION
           |coma EXPRESION RETORNO1;

EXP_ASIG::= ARIT_ASIG EXP;

EXP::= Identificador:i para VALS parc {:valorV = i.toString() + "(" + valorV + ")";:}
       |Identificador:i para parc {:valorV = i.toString() + "()";:} 
       |EXP_COM;

EXP_COM::= EXP_COM2 OPERS EXP_COM
          |menos EXP {:valorV = "-" + valorV;:}
          |mas EXP
          |NOT_REP EXP
          |EXP_COM2;

NOT_REP::= not:v NOT_REP {:valorV = v.toString() + valorV;:}
		  |not:v {:valorV = v.toString() + valorV;:};

EXP_COM2::= para EXP parc {:valorV = "(" + valorV + ")";:}
		   |TERM;

VALS::= EXP coma VALS {:valorV = "," + valorV;:}
       |EXP;

OPERS::= ARIT1
        |BOOLS;

ARIT1::= mas:v {:valorV+= v.toString();:}
        |menos:v {:valorV+= v.toString();:}
        |por:v {:valorV+= v.toString();:}
        |div:v {:valorV+= v.toString();:}
        |mod:v {:valorV+= v.toString();:};

ARIT_ASIG::= igual
            |masigual
            |menosigual
            |porigual
            |divigual;
            
ARIT_ASIG2::= masmas
             |menosmenos;

BOOLS::= igualigual:i {:valorV = i.toString();:}
        |mayque:m {:valorV = m.toString();:}
        |may:m {:valorV = m.toString();:}
        |menque:m {:valorV = m.toString();:}
        |men:m {:valorV = m.toString();:}
        |dif:d {:valorV = d.toString();:}
        |or:o {:valorV = o.toString();:}
        |and:a {:valorV = a.toString();:};

NCONST::= CONST_REP TIPO
         |TIPO CONST_REP
         |CONST_REP;

CONST_REP::= rconst:t CONST_REP {:tipo+= t.toString()+" ";:}
            |rconst:t {:tipo+= t.toString()+" ";:};

TIPO::= rint:t {:tipo+= t.toString(); pilaTipo.push(tipo); tipo = "";:}
       |rchar:t {:tipo+= t.toString();pilaTipo.push(tipo);tipo = "";:}
       |rlong:t {:tipo+= t.toString();pilaTipo.push(tipo);tipo = "";:}
       |TIPO_MODI rint:t {:tipo+= t.toString();pilaTipo.push(tipo);tipo = "";:}
      // |rint:t TIPO_MODI {:tipo+= t.toString();:}   //DA PROBLEMAS AL GENERAR LA TABLA DE SIMBOLOS
       |rlong:t rlong:tt {:tipo+= t.toString() +" "+ tt.toString();pilaTipo.push(tipo);tipo = "";:}
       |rshort:t {:tipo+= t.toString();pilaTipo.push(tipo);tipo = "";:};

TIPO_MODI::= rlong:t {:tipo+= t.toString()+" ";:}
            |rlong:t rlong:tt {:tipo+= t.toString() +" "+ tt.toString()+" ";:}
            |rshort:t {:tipo+= t.toString()+" ";:};

TERM::= num:n {:valorV = n.toString();:}
       |txt:t {:valorV = t.toString();:}
       |Identificador:i {:valorV = i.toString();:};